{
  "index.html": {
    "href": "index.html",
    "title": "Get started with the BrainPad!",
    "keywords": "Get started with the BrainPad! STEM is a path, not a toy. From beginner to expert, the BrainPad evolves to expand your abilities. BrainPad: For every age*, for every skill level -- for everyone! *Adult supervision required for ages 12 and under. There are two main paths to get started with the BrainPad: Start Making Go Beyond Platform Based on Microsoft MakeCode Based on .NET and Visual Studio Language Drag and drop blocks and Javascript C# and Visual Basic Setup Online tools with nothing to install Requires system setup Setup Time Instant About an hour Skill Level Beginner. Easy to start with and learn Beginner through professional Requirements Any operating system with any modern web browser Windows (version 7 or newer) computers only Troubleshooting Limited Full featured debugging tools Ages 6+ 12+ Additional BrainPad Resources can be found here . You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "advanced/stm32-bootloader.html": {
    "href": "advanced/stm32-bootloader.html",
    "title": "STM32 Bootloader",
    "keywords": "STM32 Bootloader The STM32 Bootloader lives on all STM32 chips. It is necessary to load files (loaders and/or firmware) onto the chip. Several TinyCLR OS supported boards will use this loader to load the software. These instructions apply to all STM32 chips with built in USB and DFU features. Creating DFU file The STM32 bootloader only accepts DFU file types, which can be generated from a HEX or BIN files. To generate a DFU file, download the \"DfuSe USB device firmware upgrade STMicroelectronics extension\" software package Depending on using a HEX or BIN files, the instructions are slightly different. From HEX files Find and open \"Dfu file manager\" and select \"I want to generate a DFU file\". Click on \"S19 or Hex...\" button to select the hex file. Click \"Generate...\" You now have the DFU file! From BIN files Find and open \"Dfu file manager\" and select \"I want to generate a DFU file\". Click on \"Multi BIN...\" button to select the bin file. Change the address to 08000000 Click on the \"Add to list >>\" button then click the \"OK\" button. Click \"Generate...\" You now have the DFU file! Uploading DFU Files To set the STM32 chip in DFU mode, BOOT1 pin (if available) needs to be low and and BOOT0 needs to be high when the system powers up. If your system has a BOOT1 button, just hold the button down while powering the system up. The device manager will see the device \"STM Device in DFU Mode\". Find and open \"Open DfuSe Demo\" (from the ST download higher in this page) Under \"Upgrade and Verify Action\", click the \"Chose...\" button and select the firmware DFU file you want to load. Click the \"Upgrade\" button. Click the \"Leave DFU mode\" button. Congratulations, your board is now running the loaded firmware!"
  },
  "advanced/csharp/csharp.html": {
    "href": "advanced/csharp/csharp.html",
    "title": "Introduction to C# (C sharp)",
    "keywords": "Introduction to C# (C sharp) It is not a secret that C and C++ are the most popular programming languages among professionals. This is particularly true for programmers that work with small digital systems. C# is the modern cousin of the C and C++ family. Its syntax is very close to JAVA, another very popular programming language. Before you start You should have already installed Visual Studio on your computer as well as the TinyCLR extension. If not, please go to Using Visual Studio with the BrainPad for instructions on how to do so. Also, you need a BrainPad and a micro USB cable to continue. Plug the BrainPad into the USB port of your computer. The red power light on the BrainPad should be on. Hello World The first step is to write some very simple code to see if your BrainPad will respond when we try to program it. This is usually called a \"hello world\" program. This program has already been written and is installed on Visual Studio. It was installed when you loaded the TinyCLR extension. Open Visual Studio. In the File menu select New and then Project to open the \"New Project\" dialog box. In the left panel of the \"New Project\" window you can click on the small triangles to the left of each heading to expand the heading and show the options beneath it. You should see the \"Visual C#\" language listed under the \"Installed\" heading in the left panel of the \"New Project\" window. Under \"Visual C#\" select the \"TinyCLR\" option. In the center panel of the \"New Project\" window select \"BrainPad Application\". At the bottom of the \"New Project\" window you can change the name and location of your application or just stick with the default. When starting out you may wish to click on the Browse button and select the folder \"Desktop\" (in the left panel) to make your application easier to find. Click the OK button on the bottom right of the \"New Project\" window. This will create a new project with some sample code to get you started. Once created, you'll be presented with a Program.cs tab. In the Program.cs tab you should see a short sample program (our \"Hello World\" code). This program is automatically loaded when you first create a new project. The lines in green that begin with two forward slashes ( // ) are called comments. Comments are generally used to describe what the program does. Take a moment to review them. You can create your own comments in a C# program by typing // before any comments you want to add. Comments have absolutely no effect on the program or how it runs. Comments do absolutely nothing and are ignored by the BrainPad. So why use comments? Comments are used to make notes about how a piece of code works. They are very helpful when you go back to your program at a later date to modify it, add to it, or fix it. They are also helpful if another programmer wants to understand or modify your code. While adding comments takes longer intitially, you more than make up for the time spent when you have to maintain your code later -- especially for lengthy or complex programs. Let's run the program now to see the code come to life. If your BrainPad is not connected to your computer with a micro USB cable connect it now. Press the F5 function key or the Start button (shown below) to copy the program from your computer to your BrainPad. Visual Studio will now tell your BrainPad to run the code. A few things will happen and the display will now show the text \"Hello!\" and the light bulb (or LED) will blink. What happened exactly? Our application began by running the BrainPadSetup() function. This function is runs one time, when the application starts, and is used to set things up. In this case, it executed the BrainPad.Display.DrawTextAndShowOnScreen(0, 0, \"Hello!\") line to instruct the display to show the text \"Hello!\" The line BrainPad.Display.DrawTextAndShowOnScreen(0, 0, \"Hello!\") is known as a function call. The name of the funtion is \"DrawTextAndShowOnScreen().\" This function is part of the \"Display\" object, which is part of the \"BrainPad\" object. The items listed in parenthesis (0, 0, \"Hello!\") are called the arguments of the function. In this case the first zero tells the BrainPad to display the text at the left side of the BrainPad display. If this number is increased the text will appear further to the right of the screen. The second zero tells the BrainPad to print the text at the top of the display. If this number is increased the text will be printed lower on the screen. The third arugument, \"Hello!,\" tells the BrainPad what text to display on the screen. After BrainPadSetup() is finished, the application calls BrainPadLoop() . Code placed inside this function is executed in an infinite loop. This is why the code that turns the LED on and then off again and never stops. Making changes to the code Let's try changing the program to print your first name on the display. After deploying the \"hello world\" program to the BrainPad, Visual Studio is in \"debug mode.\" We'll learn more about debug mode later, but for now you need to know that you cannot edit code while in debug mode. To stop debug mode, hit the Stop button (as shown below) or hit Shift F5 . If you try to edit code and see the message \"Managed Compatibility Mode does not support Edit and Continue,\" you are trying to edit code while in debug mode. Just stop debug mode ( Stop button or Shift F5 ) and you can edit your program. Use the mouse to place the cursor after the exclamation point in the BrainPad.Display.DrawTextAndShowOnScreen(0, 0, \"Hello!\") function call (as shown below). This should be in line 11 of the program (line numbers are listed near the left edge of the program). Use the Backspace key to erase \"Hello!\" and type in your first name. Run the program by hitting the F5 key. The display on the BrainPad should now display your first name on the BrainPad. Can you make the BrainPad display your name near the center of the screen? Changing the Light Bulb Code Tip You may be confused by the use of \"light bulb\" (2 words) and LightBulb (1 word). Light bulb (2 words) is correct English. LightBulb (1 word) is a BrainPad object. Object names in a program cannot contain spaces. You will often find that object names and other names in a program cannot be written as proper English because of the rules of the programming language you are using. Let's try to change the way the light bulb flashes. We're going to add two lines of code to the end of the program: BrainPad.LightBulb.TurnBlue(); BrainPad.Wait.Seconds(1); Exit debug mode by hitting the Stop button with the mouse or by pressing Shift F5 . Now place the cursor after the last line of code ( BrainPad.Wait.Seconds(1); ) by pointing and clicking with the mouse as shown below. Now hit the Enter key. This will move the cursor past the last line of the program and create a blank line where you can start typing your code. Now type a \"b\" for BrainPad. You will see a drop down box with a list of objects beginning with the letter \"b.\" You may have to type \"br\" to see BrainPad listed. You can keep typing the word \"BrainPad,\" but the easiest way to complete the word is to hit the period key( . ). This will complete typing the word \"BrainPad\" and place a period after it. You can also use the mouse to select \"BrainPad\" from the list, or hit the Space Bar or Enter key. You can also use the arrow keys to move up and down the list. After \"BrainPad.\" another small window with a list of objects that are part of the BrainPad object will appear. Now start typing the word \"lightbulb.\" Another drop down list will appear. Select \"LightBulb\" from the list. Visual Studio's ability to provide a list of words to complete your code is called \"IntelliSense.\" IntelliSense makes it easier for programmers to enter code and to know which objects are part of the preceeding object. Make your code look like the code in the picture below. Do not forget to put a semicolon ( ; ) after each line of code. The semicolon is used in C# as an end of line indicator. Every line in a C# program (or C or C++ program) must end with a semicolon ( ; ). When your code looks like the above example, hit the F5 key to load the program into the BrainPad and run it. The light bulb should follow the pattern: White for 1 second, off for 1 second, blue for 1 second and repeat. There is no delay between the end of the blue blink and the start of the white blink. Do you know why? Make sure you understand how this code works. Feel free to alter the code with different color light bulb blinks for different durations. LightBulb colors: TurnBlue() TurnGreen() TurnRed() TurnWhite() Can you make to BrainPad light bulb flash like a police car? Slowing Down a Program Copy and paste the code from Example 1 below into your project's 'BrainPadLoop()' between its two curly braces { }. It should look like the screen shot below the sample code. If you select the old code before pasting the new code, you can erase the old program at the same time you put in the new one. Tip Parentheses ( ) and curly braces { } are used differently, do not confuse them. Example 1: BrainPad.LightBulb.TurnGreen(); BrainPad.LightBulb.TurnOff(); BrainPad.LightBulb.TurnGreen(); BrainPad.LightBulb.TurnOff(); Now, press F5 to run the code. You should see the light bulb turn green and stay on. This happens because our code is executing faster than we can see. We never see the light bulb actually blink. If you shake the BrainPad while looking at the green light you can see that it is actually blinking very rapidly. Since applications run so quickly, slowing them down can help us solve problems in the program. Slowing down a program can help us see what is happening and see if the code performs as expected. Visual Studio allows us to run code one line at a time. This is called stepping through the code and allows us to see what the application is doing one instruction at a time. Stepping Through Code First, if the debugger is running stop it by pressing the Stop button, hitting Shift F5 , or selecting Stop Debugging in the Debug menu. Add a breakpoint (stop point) at the first line of code inside of BrainPadLoop() by clicking on that line with the mouse and pressing the F9 key as shown below. You can also click in the grey area where the breakpoints appear (at the left edge of the window) to either remove or create new breakpoints. Press F5 to run the application. The project will be built and deployed but then the execution will stop at the breakpoint as shown below. Now hit the F10 key to step through the code one instruction at a time. You can follow the program on the screen and watch the BrainPad light bulb turn green and turn off repeatedly as you hit the F10 key. Single stepping through a program is a very helpful way to see what is happening inside a program and is often used to fix problems within a program. Adding Delays to Code Another way to see what's happening inside a program is to add delays between the instructions. Copy and paste the code below into your project's BrainPadLoop() , between the two curly braces { } . Example 2: BrainPad.LightBulb.TurnGreen(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnOff(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnGreen(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnOff(); BrainPad.Wait.Seconds(1); Your code should look like the screen shot below: This program is the same as the previous program (Example 1) except a delay of one second is added after each instruction. Run the code by pressing START and observe the light bulb again. It should now blink green much more slowly than before. More Light Bulb Colors You may have noticed that in addition to the light bulb functions that turns the LED blue, green, red, white and off, there is a function called \"TurnColor()\" which is part of the LightBulb object. The TurnColor() function takes three arguments which describe the color of the light bulb. The first argument tells the light bulb how much red to use, the second how much green, and the third how much blue. Each number is a percentage, or a number from 0 to 100 with 0 being off and 100 being full brightness. The code in the Example 3 shows how this function is used. Copy the code and paste it into BrainPadLoop() between the two curly braces { } . Now run the code. The light bulb should cycle through colors starting at red, ending at white, and then repeating. The light bulb should also get progessively brighter with red being the dimmest color and white being the brightest. Also, the name of each color should appear on the BrainPad display. The color names should start a the top of the screen and move down the screen. Study the code to figure out how it works. Feel free to modify the code to experiment with the light bulb and the display. Example 3: BrainPad.Display.DrawTextAndShowOnScreen(45, 0, \"Red\"); BrainPad.LightBulb.TurnColor(1, 0, 0); BrainPad.Wait.Seconds(2); BrainPad.Display.DrawTextAndShowOnScreen(35, 8, \"Green\"); BrainPad.LightBulb.TurnColor(0, 2, 0); BrainPad.Wait.Seconds(2); BrainPad.Display.DrawTextAndShowOnScreen(40, 16, \"Blue\"); BrainPad.LightBulb.TurnColor(0, 0, 5); BrainPad.Wait.Seconds(2); BrainPad.Display.DrawTextAndShowOnScreen(29, 24, \"Yellow\"); BrainPad.LightBulb.TurnColor(10, 10, 0); BrainPad.Wait.Seconds(2); BrainPad.Display.DrawTextAndShowOnScreen(41, 32, \"Cyan\"); BrainPad.LightBulb.TurnColor(0, 20, 20); BrainPad.Wait.Seconds(2); BrainPad.Display.DrawTextAndShowOnScreen(25, 40, \"Magenta\"); BrainPad.LightBulb.TurnColor(50, 0, 50); BrainPad.Wait.Seconds(2); BrainPad.Display.DrawTextAndShowOnScreen(37, 48, \"White\"); BrainPad.LightBulb.TurnColor(100, 100, 100); BrainPad.Wait.Seconds(2);"
  },
  "get-inspiderd/robotics.html": {
    "href": "get-inspiderd/robotics.html",
    "title": "Robotics",
    "keywords": "Robotics As a demo, we built this robot with a chassis we ordered from Amazon http://a.co/dwzywoI The continuous servo motors simply plug in. Pay attention to wires, where the orange wire should be connected to the pin labeled with ~. We then used a breadboard with an ultrasonic distance sensor. This will be used to detect objects, to back up the robot. BrainPad.ServoMotors.ServoOne.ConfigureAsContinuous(false); BrainPad.ServoMotors.ServoTwo.ConfigureAsContinuous(true); BrainPad.Display.DrawSmallTextAndRefreshScreen(0, 20, \"Press Left\"); while (BrainPad.Buttons.IsLeftPressed() == false) { // Beep BrainPad.Buzzer.Beep(); BrainPad.Wait.Seconds(0.3); } BrainPad.Display.ClearScreen(); BrainPad.Display.DrawSmallTextAndRefreshScreen(40, 20, \"Go!\"); //BrainPad.ServoMotorsIsServoTwoInverted(true); bool dirrection = true; BrainPad.ServoMotors.ServoOne.Set(50); BrainPad.Display.DrawSmallTextAndRefreshScreen(40, 20, \"Reflect\"); // using reflector bool use_builtin = true; if (use_builtin) { GpioPulseReaderWriter echolen = new GpioPulseReaderWriter( GpioPulseReaderWriter.Mode.EchoDuration, true, 10, BrainPad.Expansion.GpioPin.Mosi, true, BrainPad.Expansion.GpioPin.Miso); Move(100, 60); //dance! while (true) { double l = echolen.Read(); BrainPad.Display.DrawSmallTextAndRefreshScreen(0, 0, l.ToString()); if (l < 600) { Move(-100, -100); BrainPad.Wait.Seconds(1); Move(-100, 100); BrainPad.Wait.Seconds(0.5); Move(100, 60); } BrainPad.Wait.Seconds(0.3); } } This other demo video talk about stepper motors and uses the BrainPad."
  },
  "go-beyond/components/accelerometer.html": {
    "href": "go-beyond/components/accelerometer.html",
    "title": "Accelerometer",
    "keywords": "Accelerometer The accelerometer is an input device that measures the force of acceleration in three axes (x, y, and z). This is commonly referred to as g-force and is expressed as a multiple of the force of gravity. For example, an airplane pilot experiences of force of 2 g in a 60 degree banked turn. This means he is being pushed into his seat with a force that is double his weight. Fighter pilots may experience up to 9 g. If the BrainPad is laying flat on a table with the display away from you on the right side, the x-axis runs horizontally left and right, the y-axis goes horizontally toward you and away from you, and the z-axis extends vertically straight up and down. If the BrainPad is stationary in this position the x and y axes would read 0 g, but the z-axis would read -1 g. This is because the force of gravity is pushing down on the accelerometer with force equal to 1 g (the force of the Earth's gravity). If you turn the BrainPad upside down, the z-axis would read 1 g. The only time all axes read zero is when the BrainPad is free falling. Accelerometer Methods BrainPad.Accelerometer.ReadX() - returns a double precision value in the range of -2 to 2 based on the BrainPad's x-axis acceleration. BrainPad.Accelerometer.ReadY() - returns a double precision value in the range of -2 to 2 based on the BrainPad's y-axis acceleration. BrainPad.Accelerometer.ReadZ() - returns a double precision value in the range of -2 to 2 based on the BrainPad's z-axis acceleration. Accelerometer Sample Code The following sample program uses the accelerometer to change the color of the LightBulb depending on how the BrainPad is tilted. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { double red, green, blue; while (true) { red = Math.Abs(BrainPad.Accelerometer.ReadX()) * 50; green = Math.Abs(BrainPad.Accelerometer.ReadY()) * 50; blue = Math.Abs(BrainPad.Accelerometer.ReadZ()) * 50; BrainPad.LightBulb.TurnColor(red, green, blue); BrainPad.Wait.Milliseconds(20); } } In this example the Math.Abs()function returns the absolute value of the number. If the accelerometer returns a negative number it is changed to a positive number before being multiplied by fifty. That way the Light Bulb always gets arguments in the range of 0-100."
  },
  "go-beyond/components/light-bulb.html": {
    "href": "go-beyond/components/light-bulb.html",
    "title": "Light Bulb",
    "keywords": "Light Bulb The BrainPad Light Bulb actually contains three light emitting diodes (LEDs) in one package. One LED is red, one is green, and one is blue. These can independently set to varying intensities to create up to a million different colors. Light Bulb Methods BrainPad.LightBulb.TurnColor(double r, double g, double b) - Used to create a variety of colors by controlling the brightness of the red, green and blue LEDs. The minimum color intensity is 0 (off) and the maximum is 100. BrainPad.LightBulb.TurnRed() - Turns the light bulb red at full intensity. BrainPad.LightBulb.TurnBlue() - Turns the light bulb blue at full intensity. BrainPad.LightBulb.TurnGreen() - Turns the light bulb green at full intensity. BrainPad.LightBulb.TurnWhite() - Turns the light bulb white at full intensity. BrainPad.LightBulb.TurnOff() - Turns off the light bulb. Same as BrainPad.LightBulb.TurnColor(0.0, 0.0, 0.0) Light Bulb Sample Code The following program turns the light bulb red, blue, green and then a custom color. It changes color every second and repeats forever. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { while (true) { BrainPad.LightBulb.TurnRed(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnBlue(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnGreen(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnColor(5, 25, 100); BrainPad.Wait.Seconds(1); } }"
  },
  "go-beyond/components/light-sensor.html": {
    "href": "go-beyond/components/light-sensor.html",
    "title": "Light Sensor",
    "keywords": "Light Sensor The BrainPad Light Sensor is used to measure the amount of light hitting the sensor. Light Sensor Method BrainPad.LightSensor.ReadLightLevel() - Reads the amount of light hitting the light sensor and returns an integer corresponding to the brightness. The higher the returned value greater the intensity of the light. The output range is from 0 to 100. Light Sensor Sample Code This program acts as a simple night light. The lower the intensity of light hitting the sensor the brighter the light bulb gets. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { double lightLevel; while (true) { lightLevel = BrainPad.LightSensor.ReadLightLevel(); lightLevel = 100 - lightLevel; BrainPad.LightBulb.TurnColor(lightLevel, lightLevel, lightLevel); BrainPad.Wait.Minimum(); } }"
  },
  "start-making/projects.html": {
    "href": "start-making/projects.html",
    "title": "Projects",
    "keywords": "Projects Tip Also see the more advanced TinyCLR OS Projects All Microsoft MakeCode projects, curriculum and lessons are found at makecode.brainpad.com You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "advanced/arduino.html": {
    "href": "advanced/arduino.html",
    "title": "Arduino",
    "keywords": "Arduino Using Arduino with the BrainPad Arduino is simplified multi-platform IDE/C++ combo, with a community STM32 options. This video shows the use of Arduino with the BrainPad. Arduino Website Arduino STM32 Github"
  },
  "advanced/intro.html": {
    "href": "advanced/intro.html",
    "title": "Introduction",
    "keywords": "Introduction The BrainPad is the only educational product which provides a continuous path from beginner programmer to professional programmer. You can start by learning drag and drop programming using Microsoft MakeCode and work your way up to the exact same tools used by professional programmers. Some of the more advanced options are listed below. C# (C Sharp) C# is a close cousin the C and C++ and Java which are among the most popular programming languages used by professionals. A general-purpose object-oriented programming language, C# can be used not only to program the BrainPad, but also desktop computers and mobile devices. We use Visual Studio to program in C#, which means not only to you get a world class development environment which is used by the pros, but it's also free! Visual Basic Microsoft Visual Basic is very similar in capabilities to C#. It is a little easier to use than C# (especially for beginners) but is not as widely used. While Visual Basic is a great way to learn programming, C# is more relevant to the world of professional programming. Like C#, we us Visual Studio for Visual Basic programming, so you can get a popular, professional, top quality programming environment for free! Arduino If you are familiar with the Arduino programming environment you can use it to program the BrainPad in C++. We encourage students to learn Visual Studio as it is more widely used professionally, but Arduino has become a very common and widely accepted standard among students, hobbyists, and engineers. Click here to get started with Arduino on the BrainPad . MicroPython You can also program the BrainPad in MicroPython. The BrainPad is a great platform for those who know or wish to learn the Python programming language. The Python computer language emphasizes code readability and allows programmers to write programs using fewer lines of code than most other common computer languages. Click here to get started in MicroPython on the BrainPad . Mbed Mbed is a free online development environment that can be used to program the BrainPad in C or C++ without downloading or installing anything. Mbed is not as friendly a development environment as VisualStudio -- you don't get the TinyCLR operating system or the advanced features and debugging of Visual Studio. The advantage of Mbed is that the entire system is completely web based. There is no software to install, maintain or update on your computer, and it is always available on any computer anywhere in the world. Click here to get started using Mbed with the BrainPad Bare Metal You can also write programs from scratch using one of the more traditional C/C++ development tools. Many of these tools are available for free. Click here to get started with bare metal BrainPad programming"
  },
  "advanced/micropython.html": {
    "href": "advanced/micropython.html",
    "title": "MicroPython",
    "keywords": "MicroPython Using MicroPython with the BrainPad MicroPython allows tiny systems to run Python 3, with a small subset of the standard library. The STM32F4 is already one of available ports, making it easier to run MicroPython on the BrainPad. This video shows the steps needed to use MicroPython on the BrainPad. MicroPyho Website GitHub Repo"
  },
  "advanced/visual-studio.html": {
    "href": "advanced/visual-studio.html",
    "title": "Using Visual Studio with the BrainPad",
    "keywords": "Using Visual Studio with the BrainPad We recommend trying Microsoft Visual Studio when you're ready to move beyond Microsoft MakeCode. Visual Studio is the most popular desktop program development environment and is used by professional programmers the world over. The experience you gain programming the BrainPad in Visual Studio also applies to programming desktop computers and smart phones, and Visual Studio's advanced debugging and code completion features make writing code a breeze! Step 1: Install Visual Studio on your computer. Skip this step if you already have Visual Studio installed on your computer. The Visual Studio Community Edition is free and can be found here: Microsoft Visual Studio 2017 Community Edition. Click on the above link an then click on the Download VS Community 2017 button. After downloading is complete, run the file. If you are asked, allow the program to make changes to your device. When the installation program shows the \"Workloads\" screen, select .NET desktop development (you should see a check mark in the .NET desktop development box) and then click the Install button. After installation is complete, click on the Launch button. You will be asked to sign in or sign up for Visual Studio developer services. You can either sign in (or sign up) now or click the \"Not now, maybe later\" option. You will then be asked to pick a color scheme and Visual Studio will start. Step 2: Install the TinyCLR extension. If you don't have the TinyCLR extension installed on your computer install it now. If Visual Studio is open, close it before continuing with the TinyCLR installation. The link to the GHI Electronics download page is here: GHI Electronics Download Page Click on the above link and under \"Visual Studio Project System\" click on the latest release in the top row of the table (v0.6.0 when this document was written). When asked, open the file. If you are asked, allow the program to make changes to your device. In the \"VSIX Installer\" dialog box click the Install button. Step 3: Start Visual Studio and Check for TinyCLR. Start Visual Studio. Click on the File menu, then click on New and then Project . The \"New Project\" dialog box will open. The small triangle to the left of each heading in the left column of the dialog box will expand (or show) the options underneath it. Under the \"Installed\" heading you should find the \"Visual C#\" and \"Visual Basic\" programming languages listed. Under each of these languages you should see the \"TinyCLR\" option. Congratulations! You have successfully installed Visual Studio and the TinyCLR extension. You can now start programming the BrainPad by picking a language (Visual C# or Visual Basic) and clicking on the link below. We recommend that students with no programming experience start with C# (C sharp). C# is more like C and C++, which are the most widely used programming languages and are the foundation of many university computer science programs. However, if you have previous BASIC programming experience you may want to start with Visual Basic. Visual Basic can be a little easier to work with and is also a very powerful and capable programming language. Starting with C#, however, may make it easier to learn C or C++ later. Click on a link below to get started: Getting Started on the BrainPad using Visual C# (Used by more professional programmers) Getting Started on the BrainPad using Visual Basic (Easier for beginners)"
  },
  "advanced/csharp/threading-and-events.html": {
    "href": "advanced/csharp/threading-and-events.html",
    "title": "Threading and Events",
    "keywords": "Threading and Events"
  },
  "advanced/vb/threading-and-events.html": {
    "href": "advanced/vb/threading-and-events.html",
    "title": "Threading and Events",
    "keywords": "Threading and Events"
  },
  "advanced/vb/visual-basic.html": {
    "href": "advanced/vb/visual-basic.html",
    "title": "Introduction to Visual Basic on the BrainPad",
    "keywords": "Introduction to Visual Basic on the BrainPad Visual Basic is a very popular Microsoft .NET programming language. While being as powerful as other programming languages, it is perhaps a little easier to start with. Visual Basic is more like plain English than other programming languages, for example, and you don't have to type a semicolon (;) at the end of each line like you do with C, C++, and C#. Before you start You should have already installed Visual Studio on your computer as well as the TinyCLR extension. If not, please go to Using Visual Studio with the BrainPad for instructions on how to do so. Also, you need a BrainPad and a micro USB cable to continue. Plug the BrainPad into the USB port of your computer. The red power light on the BrainPad should be on. Hello World The first step is to write some very simple code to see if the BrainPad will respond when we try to program it. This is usually called a \"hello world\" program. This program has already been written and is installed on Visual Studio. It was installed when you loaded the TinyCLR extension. Open Visual Studio. In the File menu select New and then Project to open the \"New Project\" dialog box. In the left panel of the \"New Project\" window you can click on the small triangles to the left of each heading to expand the heading and show the options beneath it. You should see the \"Visual Basic\" language listed under the \"Installed\" heading in the left panel of the \"New Project\" window. Under \"Visual Basic\" select the \"TinyCLR\" option. In the center panel of the \"New Project\" window select \"BrainPad Application\". At the bottom of the \"New Project\" window you can change the name and location of your application or just stick with the default. When starting out you may wish to click on the Browse button and select the folder \"Desktop\" (in the left panel) to make your application easier to find. Click the OK button on the bottom right of the \"New Project\" window. This will create a new project with some sample code to get you started. Once created, you'll be presented with a Program.vb tab. In the Program.vb tab you should see a short sample program (our \"Hello World\" code). This program is automatically loaded when you first create a new project. The lines in green that begin with an apostrophe ( ' ) are called comments, and they generally describe what the code does. Take a moment to review them. You can create your own comments in a Visual Basic program by typing ' before any comments you want to add. Comments have absolutely no effect on the program or how it runs. Comments do absolutely nothing and are ignored by the BrainPad. So why use comments? Comments are used to make notes about how a piece of code works. They are very helpful when you go back to your program at a later date to modify it, add to it, or fix it. They are also helpful if another programmer wants to understand or modify your code. While adding comments takes longer intitially, you more than make up for the time spent when you have to maintain your code later -- especially for lengthy or complex programs. Let's run the program now to see the code come to life. Connect the BrainPad and press the F5 function key or the 'Start' button (shown below). Visual Studio will now tell your BrainPad to run the code. A few things will happen and the display will now show the text \"Hello!\" and the light bulb (or LED) will blink. What happened exactly? Our application began by running the BrainPadSetup() function. This function is runs one time, when the application starts, and is used to set things up. In this case, it executed the BrainPad.Display.DrawTextAndRefreshScreen(0, 0, \"Hello!\") line to instruct the display to show the text \"Hello.\" The line BrainPad.Display.DrawTextAndRefreshScreen(0, 0, \"Hello!\") is known as a function call. The name of the funtion is \"DrawTextAndRefreshScreen().\" This function is part of the \"Display\" object, which is part of the \"BrainPad\" object. The items listed in parenthesis (0, 0, \"Hello!\") are called the arguments of the function. In this case the first zero tells the BrainPad to display the text at the left side of the BrainPad display. If this number is increased the text will appear further to the right of the screen. The second zero tells the BrainPad to print the text at the top of the display. If this number is increased the text will be printed lower on the screen. The third arugument, \"Hello!,\" tells the BrainPad what text to display on the screen. After BrainPadSetup() is finished, the application calls BrainPadLoop() . Code placed inside this function is executed in an infinite loop. This is why the code that turns the LED on and then off again and never stops. Making changes to the code Let's try changing the program to print your first name on the display. After deploying the \"hello world\" program to the BrainPad, Visual Studio is in \"debug mode.\" We'll learn more about debug mode later, but for now you need to know that you cannot edit code while in debug mode. To stop debug mode, hit the Stop button (as shown below) or hit Shift F5 . If you try to edit code and see the message \"Managed Compatibility Mode does not support Edit and Continue,\" you are trying to edit code while in debug mode. Just stop debug mode ( Stop button or Shift F5 ) and you can edit your program. Use the mouse to place the cursor after the exclamation point in the BrainPad.Display.DrawTextAndRefreshScreen(0, 0, \"Hello!\") function call (as shown below). This should be in line 5 of the program (line numbers are listed near the left edge of the program). Use the Backspace key to erase \"Hello!\" and type in your first name. Run the program by hitting the F5 key. The display on the BrainPad should now display your first name on the BrainPad. Can you make the BrainPad display your name near the center of the screen? Changing the Light Bulb Code Tip You may be confused by the use of \"light bulb\" (2 words) and LightBulb (1 word). Light bulb (2 words) is correct English. LightBulb (1 word) is a BrainPad object. Object names in a program cannot contain spaces. You will often find that object names and other names in a program cannot be written as proper English because of the rules of the programming language you are using. Let's try to change the way the light bulb flashes. We're going to add two lines of code to the end of the program: BrainPad.LightBulb.TurnBlue() BrainPad.Wait.Seconds(1) Exit debug mode by hitting the Stop button with the mouse or by pressing Shift F5 . Now place the cursor after the last line of code ( BrainPad.Wait.Seconds(1); ) by pointing and clicking with the mouse as shown below. Now hit the Enter key. This will move the cursor past the last line of the program and create a blank line where you can start typing your code. Now type a \"b\" for BrainPad. You will see a drop down box with a list of objects beginning with the letter \"b.\" You may have to type \"br\" to see BrainPad listed. You can keep typing the word \"BrainPad,\" but the easiest way to complete the word is to hit the period key( . ). This will complete typing the word \"BrainPad\" and place a period after it. You can also use the mouse to select \"BrainPad\" from the list, or hit the Space Bar or Enter key. You can also use the arrow keys to move up and down the list. After \"BrainPad.\" another small window with a list of objects that are part of the BrainPad object will appear. Now start typing the word \"lightbulb.\" Another drop down list will appear. Select \"LightBulb\" from the list. Visual Studio's ability to provide a list of words to complete your code is called \"IntelliSense.\" IntelliSense makes it easier for programmers to enter code and to know which objects are part of the preceeding object. Make your code look like the code in the picture below. When your code looks like the above example, hit the F5 key to load the program into the BrainPad and run it. The light bulb should follow the pattern: White for 1 second, off for 1 second, blue for 1 second and repeat. There is no delay between the end of the blue blink and the start of the white blink. Do you know why? Make sure you understand how this code works. Feel free to alter the code with different color light bulb blinks for different durations. LightBulb colors: TurnBlue() TurnGreen() TurnRed() TurnWhite() Can you make to BrainPad light bulb flash like a police car? Slowing Down a Program Copy and paste the code from Example 1 below into your project's 'BrainPadLoop()'. It should look like the screen shot below the sample code. If you select the old code before pasting the new code, you can erase the old program at the same time you put in the new one. Example 1: BrainPad.LightBulb.TurnGreen() BrainPad.LightBulb.TurnOff() BrainPad.LightBulb.TurnGreen() BrainPad.LightBulb.TurnOff() Now, press F5 to run the code. You should see the light bulb turn green and stay on. This happens because our code is executing faster than we can see. We never see the light bulb actually blink. If you shake the BrainPad while looking at the green light you can see that it is actually blinking very rapidly. Since applications run so quickly, slowing them down can help us solve problems in the program. Slowing down a program can help us see what is happening and see if the code performs as expected. Visual Studio allows us to run code one line at a time. This is called stepping through the code and allows us to see what the application is doing one instruction at a time. Stepping Through Code First, if the debugger is running stop it by pressing the Stop button, hitting Shift F5 , or selecting Stop Debugging in the Debug menu. Add a breakpoint (stop point) at the first line of code inside of BrainPadLoop() by clicking on that line with the mouse and pressing the F9 key as shown below. You can also click in the grey area where the breakpoints appear (at the left edge of the window) to either remove or create new breakpoints. Press F5 to run the application. The project will be built and deployed but then the execution will stop at the breakpoint as shown below. Now hit the F10 key to step through the code one instruction at a time. You can follow the program on the screen and watch the BrainPad light bulb turn green and turn off repeatedly as you hit the F10 key. Single stepping through a program is a very helpful way to see what is happening inside a program and is often used to fix problems within a program. Adding Delays to Code Another way to see what's happening inside a program is to add delays between the instructions. Copy and paste the code below into your project's BrainPadLoop() . Example 2: BrainPad.LightBulb.TurnGreen() BrainPad.Wait.Seconds(1) BrainPad.LightBulb.TurnOff() BrainPad.Wait.Seconds(1) BrainPad.LightBulb.TurnGreen() BrainPad.Wait.Seconds(1) BrainPad.LightBulb.TurnOff() BrainPad.Wait.Seconds(1) Your code should look like the screen shot below: This program is the same as the previous program (Example 1) except a delay of one second is added after each instruction. Run the code by pressing START and observe the light bulb again. It should now blink green much more slowly than before. More Light Bulb Colors You may have noticed that in addition to the light bulb functions that turns the LED blue, green, red, white and off, there is a function called \"TurnColor()\" which is part of the LightBulb object. The TurnColor() function takes three arguments which describe the color of the light bulb. The first argument tells the light bulb how much red to use, the second how much green, and the third how much blue. Each number is a percentage, or a number from 0 to 100 with 0 being off and 100 being full brightness. The code in the Example 3 shows how this function is used. Copy the code and paste it into BrainPadLoop() . Now run the code. The light bulb should cycle through colors starting at red, ending at white, and then repeating. The light bulb should also get progessively brighter with red being the dimmest color and white being the brightest. Also, the name of each color should appear on the BrainPad display. The color names should start a the top of the screen and move down the screen. Study the code to figure out how it works. Feel free to modify the code to experiment with the light bulb and the display. Example 3: BrainPad.Display.DrawTextAndShowOnScreen(45, 0, \"Red\") BrainPad.LightBulb.TurnColor(1, 0, 0) BrainPad.Wait.Seconds(2) BrainPad.Display.DrawTextAndShowOnScreen(35, 8, \"Green\") BrainPad.LightBulb.TurnColor(0, 2, 0) BrainPad.Wait.Seconds(2) BrainPad.Display.DrawTextAndShowOnScreen(40, 16, \"Blue\") BrainPad.LightBulb.TurnColor(0, 0, 5) BrainPad.Wait.Seconds(2) BrainPad.Display.DrawTextAndShowOnScreen(29, 24, \"Yellow\") BrainPad.LightBulb.TurnColor(10, 10, 0) BrainPad.Wait.Seconds(2) BrainPad.Display.DrawTextAndShowOnScreen(41, 32, \"Cyan\") BrainPad.LightBulb.TurnColor(0, 20, 20) BrainPad.Wait.Seconds(2) BrainPad.Display.DrawTextAndShowOnScreen(25, 40, \"Magenta\") BrainPad.LightBulb.TurnColor(50, 0, 50) BrainPad.Wait.Seconds(2) BrainPad.Display.DrawTextAndShowOnScreen(37, 48, \"White\") BrainPad.LightBulb.TurnColor(100, 100, 100) BrainPad.Wait.Seconds(2)"
  },
  "go-beyond/projects/live-tictactoe.html": {
    "href": "go-beyond/projects/live-tictactoe.html",
    "title": "Live Tic Tac Toe",
    "keywords": "Live Tic Tac Toe"
  },
  "go-beyond/projects/pong.html": {
    "href": "go-beyond/projects/pong.html",
    "title": "Pong",
    "keywords": "Pong The classic Pong game -- the grandfather of all video games! Now over 45 years old! Difficulty: Easy Objective: Retro gaming How It Works Suprisingly, this very simple game requires about as much code as the Space Invasion game. In this game a single player plays against the BrainPad. The player uses the up and down buttons to move his paddle (on the right side of the screen) and tries to hit a moving ball across the net (the dashed line) to the other side of the court. You score points when the BrainPad misses the ball. The BrainPad scores when you miss the ball. The first player (you or the BrainPad) to get five points wins. An Exercise Modify the code to so tilt (the accelerometer) is used instead of buttons. Hint: Use the Tilt Etch A Sketch for help. The Code Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . using System; using System.Collections; using System.Text; using System.Threading; using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Program { static void Main() { double BallX = 10, BallY = 10, BallDX = 2.3, BallDY = 2.8; int ScoreL = 0, ScoreR = 0; int PlayerPos = 30; int CompPros = 30; BrainPad.Display.DrawRectangle(0, 0, 128, 64); while (true) { // The Ball BrainPad.Display.ClearPartOfScreen((int)BallX, (int)BallY, 4, 4); BallX += BallDX; BallY += BallDY; if (BallX < 10) { BallDX *= -1; if (BallY >= CompPros - 1 && BallY <= CompPros + 12) { // hit back BrainPad.Buzzer.Beep(); } else { //win for (int i = 0; i < 3; i++) { for (int f = 1000; f < 6000; f += 500) { BrainPad.Buzzer.StartBuzzing(f); BrainPad.Wait.Minimum(); } } ScoreR++; BrainPad.Buzzer.StopBuzzing(); BrainPad.Wait.Seconds(0.5); } } if (BallX > 115) { BallDX *= -1; if (BallY >= PlayerPos - 1 && BallY <= PlayerPos + 12) { // hit back BrainPad.Buzzer.Beep(); } else { // Loss for (int f = 2000; f > 200; f -= 200) { BrainPad.Buzzer.StartBuzzing(f); BrainPad.Wait.Minimum(); } ScoreL++; BrainPad.Wait.Seconds(0.5); BrainPad.Buzzer.StopBuzzing(); } } if (BallY < 5 || BallY > 55) { BallDY *= -1; BrainPad.Buzzer.Beep(); } BrainPad.Display.DrawFilledRectangle((int)BallX, (int)BallY, 4, 4); // The Field for (var y = 0; y < 64; y += 10) { // net BrainPad.Display.DrawLine(64, y, 64, y + 5); } // Player BrainPad.Display.ClearPartOfScreen(120, PlayerPos, 2, 10); if (BrainPad.Buttons.IsUpPressed()) PlayerPos -= 4; if (BrainPad.Buttons.IsDownPressed()) PlayerPos += 4; if (PlayerPos < 5) PlayerPos = 5; if (PlayerPos > 50) PlayerPos = 50; BrainPad.Display.DrawFilledRectangle(120, PlayerPos, 2, 10); // Computer BrainPad.Display.ClearPartOfScreen(10, CompPros, 2, 10); if (BallY > CompPros + 10) CompPros += 2; if (BallY < CompPros) CompPros -= 2; if (CompPros < 5) CompPros = 5; if (CompPros > 50) CompPros = 50; BrainPad.Display.DrawFilledRectangle(10, CompPros, 2, 10); // Score BrainPad.Display.DrawSmallNumber(50, 5, ScoreL); BrainPad.Display.DrawSmallNumber(74, 5, ScoreR); if (ScoreL >= 5) { BrainPad.Display.DrawScaledText(0, 40, \"You Lose!\", 3, 1); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Seconds(-1); } if (ScoreR >= 5) { BrainPad.Display.DrawScaledText(0, 40, \"You Win!\", 3, 1); BrainPad.Display.RefreshScreen(); while (true) BrainPad.Wait.Seconds(1); } BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } }"
  },
  "go-beyond/projects/tilt-etch-a-sketch.html": {
    "href": "go-beyond/projects/tilt-etch-a-sketch.html",
    "title": "Tilt Etch A Sketch",
    "keywords": "Tilt Etch A Sketch A BrainPad version of the classic mechanical drawing toy. Simply tilt the screen to show the sketch and press the down button to erase it. Difficulty: Easy Objective: Gaming, Drawing How It Works This program is simple. We draw a circle on the screen and move it when the BrainPad is tilted. We measure the force of the Earth's gravity on the BrainPad's accelerometer to measure how much the BrainPad is tilted. The Code Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Program { static void Main() { BrainPad.Display.DrawSmallText(0, 57, \"Tilt: Draw - D: Erase\"); BrainPad.Display.DrawLine(0, 55, 127, 55); int x = 64, y = 32; const double ACC_TOLERANCE = .20; while (true) { if (BrainPad.Accelerometer.ReadY() > -ACC_TOLERANCE) y--; if (BrainPad.Accelerometer.ReadY() < ACC_TOLERANCE) y++; if (BrainPad.Accelerometer.ReadX() > ACC_TOLERANCE) x++; if (BrainPad.Accelerometer.ReadX() < -ACC_TOLERANCE) x--; if (x < 0) x = 0; if (y < 0) y = 0; if (x > 127) x = 127; if (y > 50) y = 50; BrainPad.Display.ClearPoint(x, y); BrainPad.Display.RefreshScreen(); if (BrainPad.Buttons.IsDownPressed()) BrainPad.Display.ClearPartOfScreen(0, 0, 128, 55); BrainPad.Wait.Minimum(); BrainPad.Display.DrawPoint(x, y); BrainPad.Display.RefreshScreen(); } } } }"
  },
  "go-beyond/vb/csharp-to-vb.html": {
    "href": "go-beyond/vb/csharp-to-vb.html",
    "title": "C# to Visual Basic",
    "keywords": "C# to Visual Basic C# and Visual Basic are very similar. They are so similar that there are online converters that will convert C# to Visual Basic and vice versa. Here is one such Code Converter . Most of the BrainPad examples and projects will be built using C#, but these samples can be converted to Visual Basic if you prefer."
  },
  "resources/dfu-files.html": {
    "href": "resources/dfu-files.html",
    "title": "DFU Files",
    "keywords": "DFU Files The microcontroller (processor) on the BrainPad can be updated with a DFU file over a USB cable. This is an advanced feature and should not be needed by most BrainPad users. ST Microelectronics, the microcontroller manufacturer, provides the tools needed for the following steps. Download and install the \"DfuSe USB device firmware upgrade STMicroelectronics extension\" software package Loading DFU Files on the BrainPad Press and hold the BOOT0 button. While continuing to hold the BOOT0 button, press and release the reset button. Wait for a second then release BOOT0 button. Optionally, check the device manager to verify it shows \"STM Device in DFU Mode\". Find and open \"Open DfuSe Demo\" (from the ST download higher in this page) Under \"Upgrade and Verify Action\", click the \"Choose...\" button and select the DFU file you want to load. Click the \"Upgrade\" button. Click the \"Leave DFU mode\" button. Creating DFU file If you have a DFU file to load then these steps are not necessary. For example, the BrainPad bootloader is already a DFU file. The instructions are slightly different depending on whether you are starting with a HEX file or a BIN file. From HEX files Find and open \"Dfu file manager\" and select \"I want to generate a DFU file\". Click on \"S19 or Hex...\" button to select the hex file. Click \"Generate...\" You now have the DFU file! From BIN files Find and open \"Dfu file manager\" and select \"I want to generate a DFU file\". Click on \"Multi BIN...\" button to select the bin file. Change the address to 08000000 Click on the \"Add to list >>\" button then click the \"OK\" button. Click \"Generate...\" You now have the DFU file!"
  },
  "resources/downloads.html": {
    "href": "resources/downloads.html",
    "title": "Downloads",
    "keywords": "Downloads Visual Studio Project System This extension is what gets loaded into Visual Studio to allow it to communicate with the BrainPad. For installation instructions click here . File Date MD5 v0.11.0 2018-05-10 ECED507FCAF84B7104A8470126769F48 NuGet Libraries Libraries are hosted though a local NuGet feed for now as we are making lot of changes still. These libraries will be hosted on http://www.nuget.org/ in the future. For installation instructions click here . File Date MD5 v0.11.0 2018-05-10 041ED0458AC82595BD33C34284BF6661 TinyCLR OS BrainPad Firmware This is the TinyCLR OS BrainPad firmware. For installation instructions click here . File Date MD5 v0.11.0 2018-05-10 F6C978F44BAFB13FFDF1C2577CB9D079 Bootloader This is the TinyCLR OS BrainPad bootloader. See the DFU Files page for instructions on loading DFU files. File Date MD5 v1.0.2 2018-04-05 4285FFAD09CF4C4C1B3C676FBC53807A"
  },
  "resources/troubleshooting-guide.html": {
    "href": "resources/troubleshooting-guide.html",
    "title": "Troubleshooting Guide",
    "keywords": "Troubleshooting Guide Use this guide to troubleshoot any issues with your BrainPad. Please follow the steps on this page before going to BrainPad Discussion Forum for help. Identify which BrainPad you have A small number of early adopters received older versions of the BrainPad. The current production BrainPad has \"BP2 Rev B\" printed in the lower left corner. If your BrainPad doesn't look exactly like the image below, check the Older BrainPad page for more details. Tip Check the reset button. If it is smaller than the directional buttons you have an Older BrainPad . Bootloader Push and hold the reset button for about 3 seconds. Does the LightBulb turn Green? If so you have a working bootloader and can skip the rest of this section. If you did not get a green light in the step above, try updating the bootloader. To update the bootloader, download the latest bootloader DFU file from the Downloads page and then go to the DFU Files page for instructions on loading DFU files. When the LightBulb turns Green, the BrainPad will present itself as a virtual storage device. Your computer should see it like any other storage device. The first time this happens, the operating system will need a few seconds to load the needed drivers. This virtual drive opens a window containing a text file that contains information such as the boot loader version. You can update the loader to the newest version to get the latest and greatest BrainPad features. Sample Demo When the BrainPad virtual drive window is open (see Bootloader section), download this demo file and drag it into the virtual drive window. TinyCLR OS We recommend starting with Microsoft MakeCode to verify the hardware is functional first. Then, load TinyCLR OS as detailed in the System Setup . Once loaded, your PC will detect a TinyCLR OS device as shown below. Visual Studio will also see the device: It is important that the TinyCLR OS version on the PC matches what is on the BrainPad. The same goes for the NuGet packages. Our experts are ready to help on our TinyCLR OS Forum . You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "start-making/intro.html": {
    "href": "start-making/intro.html",
    "title": "Start Making",
    "keywords": "Start Making To get started with the BrainPad you don't need to install any software. You don't even need a BrainPad -- just use the online simulator! Microsoft MakeCode makes it all possible. Tip The BrainPad can also be programmed in the same way professional developers do. Depending on your goals and skill level, you can Go Beyond Microsoft MakeCode and start coding using .NET and Visual Studio when you are ready. Microsoft MakeCode Microsoft MakeCode is a great way to learn programming. Microsoft MakeCode allows you to drag and drop blocks to create programs while seeing the results on a simulated BrainPad. Microsoft MakeCode also has a JavaScript program editor. When you change your block program Microsoft MakeCode changes your text (JavaScipt) program for you. Changes made to the text program will automatically show up as changes to your block program. When you get your program working on the simulator, you can just drag and drop it to run it on the real BrainPad! Tip The BrainPad has a simulator in Microsoft MakeCode . This means you can start making even if you do not have a BrainPad yet. A Quick Test! Run this quick test to verify your BrainPad is ready: Plug your BrainPad into a Windows computer using a micro USB cable. The red power (PWR) LED on the BrainPad should light up. Press and hold the reset button for about three seconds. The BrainPad Light Bulb should turn green and the computer should find a new drive and open a window for it. Download this file . When the download is complete, select Show in folder or Save and Open folder (depending on your browser). Copy the downloaded file into the BrainPad folder from step 2 (or drag and drop it into the BrainPad folder). The green LED will flash a little then the board will reset. The display should show the text \"Your BrainPad is ready to go!\" and the Light Bulb should be lit blue something like the image below. If any of the steps above failed, visit this Troubleshooting Guide You Are Ready The BrainPad's Microsoft MakeCode section has instructions, tutorials, and sample programs: makecode.brainpad.com You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "get-inspiderd/iot.html": {
    "href": "get-inspiderd/iot.html",
    "title": "Artificial Intelligence",
    "keywords": "Artificial Intelligence Tick Tak Toe"
  },
  "go-beyond/brainpad-class-reference.html": {
    "href": "go-beyond/brainpad-class-reference.html",
    "title": "BrainPad Class Reference",
    "keywords": "BrainPad Class Reference BrainPad.Accelerometer The accelerometer is an input device that measures the force of acceleration in three axes (x, y, and z). This is commonly referred to as g-force and is expressed as a multiple of the force of gravity. For example an airplane pilot experiences of force of 2 g in a 60 degree banked turn. This means he is being pushed into his seat with a force that is double his weight. Fighter pilots may experience up to 9 g. If the BrainPad is laying flat on a table with the display away from you on the right side, the x-axis runs left and right, the y-axis goes toward you and away from you, and the z-axis extends vertically straight up and down. In this position the x and y axes would read 0 g, but the z axis would read 1 g. This is because the force of gravity is exerting 1 g of force on the accelerometer. The only time all axes would read zero is if the BrainPad is free falling. BrainPad.Accelerometer.ReadX() � returns a double precision value in the range of -2 to 2 based on the BrainPad�s X-axis acceleration. BrainPad.Accelerometer.ReadY()� returns a double precision value in the range of -2 to 2 based on the BrainPad�s Y-axis acceleration. BrainPad.Accelerometer.ReadZ()� returns a double precision value in the range of -2 to 2 based on the BrainPad�s Z-axis acceleration. BrainPad.Buttons The four directional buttons (up, down, right and left) are used as inputs and can be read by your program to determine if the button is being pressed or not. They can be checked in two different ways. One way is to just check once to see if the button is being pressed. This works well, but it is possible to miss a button press if your program doesn't check often enough. Sometimes this is not a problem, but for some programs it may be an issue. The other way of checking buttons is to use an event handler. An event handler will continuously check to see if a button has been pressed or released. A button is released when the person pushing the button stops pushing the button. Once an event handler is set up, the BrainPad will start an event listener that will check the button for you. This allows your program to do other tasks without you worrying about missing a button event. Once the button is pushed (or released) the event listener will call your event handler. The event handler is code you write to tell the BrainPad how to react when a button is pushed (or released). While an event handler is a little harder to set up, it has the advantage allowing you to be concerned with other tasks and never missing a button event. BrainPad.Buttons.IsUpPressed() � returns a boolean true if the up button is pressed and a boolean false otherwise. BrainPad.Buttons.IsLeftPressed() � returns a boolean true if the left button is pressed and a boolean false otherwise. BrainPad.Buttons.IsRightPressed() � returns a boolean true if the right button is pressed and a boolean false otherwise. BrainPad.Buttons.IsDownPressed() � returns a boolean true if the down button is pressed and a boolean false otherwise. ButtonEventHandler WhenDownButtonReleased ButtonEventHandler WhenUpButtonPressed ButtonEventHandler WhenUpButtonReleased ButtonEventHandler WhenRightButtonPressed ButtonEventHandler WhenRightButtonReleased ButtonEventHandler WhenDownButtonPressed ButtonEventHandler WhenLeftButtonReleased ButtonEventHandler WhenLeftButtonPressed BrainPad.Buzzer The BrainPad buzzer is an output device. It is really not a buzzer but a crude speaker that is even capable of playing voice or music, but with very poor quality. The buzzer commands allow you to make a beep sound where you have no control over the frequency or duration of the sound. You can also tell the BrainPad to play a tone where you decide the frequency. The BrainPad will keep playing that sound until you tell it to stop. This allows you to play sound effects for games as well as simple melodies. BrainPad.Buzzer.Beep() � Plays a short duration beep on the BrainPad's buzzer. BrainPad.Buzzer.StartBuzzing(double frequency) � Plays a sound of the given frequency. Will keep playing untils told to stop. [Example: BrainPad.Buzzer.StartBuzzing(251.00)] BrainPad.Buzzer.StopBuzzing() � Stops the buzzer if it is currently playing. BrainPad.Display The BrainPad display is an output device. The BrainPad has commands allowing you to display numbers and text and draw simple pictures and shapes including points, lines, circles and rectangles. Display commands in this section only change the memory buffer of the display and are not seen until you also call the BrainPad.Display.RefreshScreen() method. BrainPad.Display.Height() � returns the BrainPad display's height in pixels (64). BrainPad.Display.Width() - returns the BrainPad display's width in pixels (128). BrainPad.Display.DrawSmallNumber(int x, int y, long number) - Displays a number of type long in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallNumber(10, 20, 52)] BrainPad.Display.DrawSmallNumber(int x, int y, double number) � Displays a number of type double in small text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, long number) - Displays a number of type long in large text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, double number) - Displays a number of type double in large text at the given x and y coordinates. BrainPad.Display.DrawSmallText(int x, int y, string text) - Displays a string in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallText(20, 20, �Hello�)] BrainPad.Display.DrawText(int x, int y, string text) � Displays a string in small text at the given x and y coordinates. BrainPad.Display.DrawScaledText(int x, int y, string text, int HScale, int VScale); BrainPad.Display.CreatePicture(int width, int height, byte[] data); BrainPad.Display.CreateScaledPicture(int width, int height, byte[] data, int scale); BrainPad.Display.DrawCircle(int x, int y, int r) � Draws a circle of radius r with the center located at the given x and y coordinates. BrainPad.Display.DrawRectangle(int x, int y, int width, int height); BrainPad.Display.DrawFilledRectangle(int x, int y, int width, int height) - Draws a filled box at the display�s x and y coordinates. Width and height are in pixels. BrainPad.Display.DrawLine(int x0, int y0, int x1, int y1) � Draws a line from (x0, y0) to (x1, y1). BrainPad.Display.DrawPoint(int x, int y) - Turns on a single pixel at the given x and y coordinates. BrainPad.Display.DrawPicture(int x, int y, Picture picture); BrainPad.Display.DrawPictureFlippedHorizontally(int x, int y, Picture picture); BrainPad.Display.DrawPictureFlippedVertically(int x, int y, Picture picture); BrainPad.Display.DrawPictureRotated180Degrees(int x, int y, Picture picture); BrainPad.Display.DrawPictureRotated270Degrees(int x, int y, Picture picture); BrainPad.Display.DrawPictureRotated90Degrees(int x, int y, Picture picture); BrainPad.Display.ClearPartOfScreen(int x, int y, int width, int height); - Clears a rectangular section of the display where x and y are the top left corner of the rectangle of given width and height BrainPad.Display.ClearPoint(int x, int y); - Clears a pixel located at the display�s x and y coordinate. BrainPad.Display.ClearScreen() - Clears the entire screen buffer. BrainPad.Display.InvertColors(bool invert); BrainPad.Display.RefreshScreen() BrainPad.LightBulb. The BrainPad Light Bulb is actually three light emitting diodes (LEDs) in one package. One LED is red, one is green, and one is blue. These can turned on independantly at varying intensities to create up to one million different colors. BrainPad.LightBulb.TurnColor(double r, double g, double b) � Used to create a variety of colors based on varying degrees of red, green and blue (min. 0 � max 100) BrainPad.LightBulb.TurnRed() BrainPad.LightBulb.TurnBlue() BrainPad.LightBulb.TurnGreen() BrainPad.LightBulb.TurnWhite() BrainPad.LightBulb.TurnOff() BrainPad.LightSensor The BrainPad Light Sensor is used to measure the amount of light falling on the sensor. BrainPad.LightSensor.ReadLightLevel() BrainPad.ServoMotors The BrainPad has built in support for two servo motors. These can be either continuous or positional servo motors. Continuous servo motors can have their speed and direction controlled but there is no control over their position. They are capabable of rotating continously in either direction. Positional servo motors only accept position commands. Positional servo motors only rotate part way through a revolution, usually turning up to half of a revolution (180 degrees). While you can tell a servo motor to go to a specific position, you have no control over how fast it will get there. The positional servo motor will move to a given position as quickly as possible, but it's speed depends on how much load is put on the motor. BrainPad.ServoMotors.ServoOne { get; } BrainPad.ServoMotors.ServoTwo { get; } BrainPad.ServoMotors.ConfigureAsContinuous(bool inverted); BrainPad.ServoMotors.ConfigureAsPositional(bool inverted); BrainPad.ServoMotors.ConfigurePulseParameters(double minimumPulseWidth, double maximumPulseWidth); BrainPad.ServoMotors.Set(double value); BrainPad.ServoMotors.Stop(); BrainPad.TemperatureSensor The BrainPad temperature sensor is basically a digital thermometer. The commands for reading the temperature can report the temperature in either Celsius or Fahrenheit. BrainPad.TemperatureSensor.ReadTemperatureInCelsius() � Returns the Celsius temp from the BrainPad�s sensor as a double. BrainPad.TemperatureSensor.ReadTemperatureInFahrenheit()� Returns the Fahrenheit temp from the BrainPad�s sensor as a double. BrainPad.Wait This command tells the BrainPad to wait and do nothing for the time specified. This command could be used to play a musical note for a given duration. It can also be used to tell the BrainPad to wait long enough for another task to finish. For example, you might tell a servo motor to move to a specified position and then tell the BrainPad to wait to give the servo time to move to that position. BrainPad.Wait.Milliseconds(double milliseconds) - Pause the code for the duration of the parameter in milliseconds. BrainPad.Wait.Seconds(double seconds) - Pause the code for the duration of the parameter in seconds. BrainPad.Wait.Minimum() � Pause the code for a default minimum duration. BrainPad.WriteToComputer This command writes numbers or text to the computers Visual Studio debug output window. This can be helpful for debugging or finding the errors in a program. For example, if you are doing a calculation involving a large number of steps that is giving an incorrect result, you can write the result of each step to the computer to figure out which step is not working properly. You could use the BrainPad's display to do the same thing, but the display might already be in use or might not be big enough to display all the information. BrainPad.WriteToComputer(string message) � Writes the string in its parameter to the Visual Studio Debug Output Window. BrainPad.WriteToComputer(int message) � Writes the integer in its parameter to the Visual Studio Debug Output Window. BrainPad.WriteToComputer(double message) � Writes the double in its parameter to the Visual Studio Debug Output Window."
  },
  "go-beyond/intro.html": {
    "href": "go-beyond/intro.html",
    "title": "Go Beyond",
    "keywords": "Go Beyond The BrainPad gives you the option to code in a truly professional development environment: Microsoft Visual Studio. Visual Studio provides modern event driven programming with full debugging allowing you to easily manage projects of any size. You will learn the same real-world programming skills used by professionals. Don't worry -- we go step by step allowing you to learn at your own pace while advancing as far as you like. To continue, start by installing Visual Studio on your computer. Instructions are found on the System Setup page. Tip An easier path to Start Making with the BrainPad is through Microsoft MakeCode, an online tool with nothing to install. It's your choice depending on your goals and skill level. You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "go-beyond/components/buzzer.html": {
    "href": "go-beyond/components/buzzer.html",
    "title": "Buzzer",
    "keywords": "Buzzer The BrainPad buzzer is an output device. It is really not a buzzer but a crude speaker that is even capable of playing voice or music, but with poor sound quality. The buzzer's beep command allows you to make a beep sound with no control over the beep's frequency or duration. You can also tell the BrainPad to play a tone where you decide the frequency. The BrainPad will keep playing that sound until you tell it to stop or tell it to play a different tone. This allows you to play sound effects for games as well as simple melodies. Buzzer Methods BrainPad.Buzzer.Beep() - Plays a short duration beep on the BrainPad's buzzer. BrainPad.Buzzer.StartBuzzing(double frequency) - Plays a sound of given frequency. Will keep playing until told to stop. BrainPad.Buzzer.StopBuzzing() - Stops the buzzer if it is currently playing. Buzzer Sample Code The following program makes a siren sound while the down button is pressed. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { while (true) { if (BrainPad.Buttons.IsDownPressed()) { for (int frequency = 1200; frequency < 3200; frequency += 160) { BrainPad.Buzzer.StartBuzzing(frequency); BrainPad.Wait.Milliseconds(8); } for (int frequency = 3200; frequency > 1200; frequency -= 160) { BrainPad.Buzzer.StartBuzzing(frequency); BrainPad.Wait.Milliseconds(8); } } else BrainPad.Buzzer.StopBuzzing(); } }"
  },
  "go-beyond/components/display.html": {
    "href": "go-beyond/components/display.html",
    "title": "Display",
    "keywords": "Display The BrainPad display is an output device. The BrainPad has commands allowing you to display numbers and text and draw simple pictures and shapes. These shapes including points, lines, circles and rectangles. All display commands use pixels (screen dots) as units. Display commands in this section only change the memory buffer of the display and are not seen until you also call the BrainPad.Display.RefreshScreen() method. Display Methods BrainPad.Display.Height() - returns the BrainPad display's height in pixels (64). BrainPad.Display.Width() - returns the BrainPad display's width in pixels (128). BrainPad.Display.DrawSmallNumber(int x, int y, long number) - Displays a number of type long in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallNumber(10, 20, 52) ] BrainPad.Display.DrawSmallNumber(int x, int y, double number) - Displays a number of type double in small text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, long number) - Displays a number of type long in large text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, double number) - Displays a number of type double in large text at the given x and y coordinates. BrainPad.Display.DrawSmallText(int x, int y, string text) - Displays a string in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallText(20, 20, \"Hello\") ] BrainPad.Display.DrawText(int x, int y, string text) - Displays a string in small text at the given x and y coordinates. BrainPad.Display.DrawScaledText(int x, int y, string text, int HScale, int VScale) - Displays text that can be made larger. Text size is multiplied by HScale to determing horizontal size and VScale to determine vertical size. For example setting HScale to two will print text that is twice as wide. BrainPad.Display.CreatePicture(int width, int height, byte[] data) - Used to store a picture for the DrawPicture commands. BrainPad.Display.CreateScaledPicture(int width, int height, byte[] data, int scale) - Used to store a picture that will be displayed larger by a factor of scale. For example setting scale to two will display the picture at twice its original size. BrainPad.Display.DrawCircle(int x, int y, int r) - Draws a circle of radius r with the center located at the given x and y coordinates. BrainPad.Display.DrawRectangle(int x, int y, int width, int height) - Draws a box at the given x and y coordinates. BrainPad.Display.DrawFilledRectangle(int x, int y, int width, int height) - Draws a filled box at the given x and y coordinates. BrainPad.Display.DrawLine(int x0, int y0, int x1, int y1) - Draws a line from (x0, y0) to (x1, y1). BrainPad.Display.DrawPoint(int x, int y) - Turns on a single pixel at the given x and y coordinates. BrainPad.Display.DrawPicture(int x, int y, Picture picture) - Draws the given picture at the given x and y coordinates. BrainPad.Display.DrawPictureFlippedHorizontally(int x, int y, Picture picture) - Flips the given picture horizontally and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureFlippedVertically(int x, int y, Picture picture) - Flips the given picture vertically and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureRotated180Degrees(int x, int y, Picture picture) - Rotates the given picture 180 degrees and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureRotated270Degrees(int x, int y, Picture picture) - Rotates the given picture 270 degrees clockwise and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureRotated90Degrees(int x, int y, Picture picture) - Rotates the given picture 90 degrees clockwise and draws it at the given x and y coordinates. BrainPad.Display.ClearPartOfScreen(int x, int y, int width, int height) - Clears a rectangular section of the display where x and y are the top left corner of a rectangle of given width and height. BrainPad.Display.ClearPoint(int x, int y) - Clears the pixel located at the given x and y coordinates. BrainPad.Display.ClearScreen() - Clears the entire screen buffer. BrainPad.Display.InvertColors(bool invert) - Inverts each pixel on the entire screen. Pixels that are on will be turned off, and pixels that are off will be turned on. BrainPad.Display.RefreshScreen() - Writes the entire display buffer to the display. Used to show what has been drawn to the screen buffer on the display. Display Sample Code The following program draws a point, line, rectangle, circle and a picture of a heart in two sizes. To try it, start a C# new project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { BrainPad.Display.DrawPoint(64, 32); BrainPad.Display.DrawLine(0, 52, 127, 52); BrainPad.Display.DrawRectangle(48, 20, 32, 24); BrainPad.Display.DrawCircle(64, 32, 20); byte[] pictureData = new byte[] { 0, 0, 1, 0, 0 ,0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, }; BrainPad.Display.DrawPicture(0, 0, BrainPad.Display.CreatePicture(9, 9, pictureData)); BrainPad.Display.DrawPicture(10, 10, BrainPad.Display.CreateScaledPicture(9, 9, pictureData, 2)); BrainPad.Display.RefreshScreen(); }"
  },
  "go-beyond/csharp/intro.html": {
    "href": "go-beyond/csharp/intro.html",
    "title": "Introduction to C# (C sharp)",
    "keywords": "Introduction to C# (C sharp) It is not a secret that C and C++ are the most popular programming languages among professionals. This is particularly true for programmers that work with small digital systems. C# is the modern cousin of the C and C++ family. Its syntax is very close to JAVA, another very popular programming language. C# Introduction Overview The instructions on this page describe how to run your first C# program (a \"hello world\" program) on the BrainPad. The steps are as follows: Start a new project . Manage the NuGet packages . Add the BrainPad helper code . Add the sample program . Deploy the program Before you start You should have already installed Visual Studio on your computer as well as the TinyCLR extension. If not, please start with System Setup for instructions on how to do so. Also, you need a BrainPad and a micro USB cable to continue. Plug the BrainPad into the USB port of your computer. The red power (PWR) light on the BrainPad should be on. Hello World The first step is to write some very simple code to see if your BrainPad will respond when we try to program it. This is usually called a \"hello world\" program. Start a New Project Open Visual Studio. In the File menu select New and then Project to open the New Project dialog box. In the left panel of the New Project window (see below) you can click on the small triangles to the left of each heading to expand the heading and show the options beneath it. You should see the Visual C# language listed under the Installed heading in the left panel of the New Project window. Under Visual C# select the TinyCLR option. In the center panel of the New Project window select TinyCLR Application . At the bottom of the New Project window you can change the name and location of your application. Change the name to \"BrainPadDemo.\" You may wish to click on the Browse button and select the folder Desktop (in the left panel) to make your application easier to find. Click the OK button on the bottom right of the New Project window. This will create a new blank project. Once created, you'll be presented with a Program.cs tab. Manage the NuGet Packages C# source files are listed in the Solution Explorer window. If the Solution Explorer window is not visible, click on View > Solution Explorer to open it. The squiggly red lines under items in the Solution Explorer window indicate errors. In this case the errors are caused by missing Nuget packages. Let's tell Visual Studio to include the Nuget packages and fix that now. If you right click on the project name in the Solution Explorer window a drop down menu will appear. Select Manage NuGet Packages... from the menu. Now you should see the installed TinyCLR NuGet library (GHIElectronics.TinyCLR.Core). We need to install a couple more libraries for our program to run. Click on Browse . You should see a list of available Nuget packages in your local feed. Click on the GHIElectronics.TinyCLR.BrainPad package and then click on the Install button. Installing the BrainPad Nuget package will automatically install the GHIElectronics.TinyCLR.Devices and GHIElectronics.TinyCLR.Pins packages as well. Click on OK . Now accept the license agreement to install the packages. Close the NuGet... tab to get back to your Program.cs window. The red squiggles should now be gone. Add the BrainPad Helper Code The BrainPad Helper code provides needed definitions for some BrainPad objects. To add this file to your program, select Add New Item... in the Project menu. Then in the Add New Item dialog box click on BrainPad Helper and then click on the Add button. You will see a tab labeled BrainPad1.cs with contents as shown below. Add the Sample Program In the Program.cs tab we will enter short sample program (our \"Hello World\" code). Cut and paste the following code into the Program.cs window. using GHIElectronics.TinyCLR.BrainPad; namespace BrainPadDemo { class Program { static void Main() { BrainPad.Display.DrawText(0, 0, \"Hello!\"); BrainPad.Display.RefreshScreen(); while (true) { BrainPad.LightBulb.TurnWhite(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnOff(); BrainPad.Wait.Seconds(1); } } } } Your Program.cs window should look like this: A few words about namespaces When you create a new C# project, a default namespace is automatically created for you. If you cut and paste code into your project you have to keep the original namespace for the project to work. You can view the project's namespace in the BrainPad Helper file as shown below. Namespace shown in BrainPad helper file: Namespace shown in program file. This must match the namespace in the BrainPad Helper file: If you did not name your project \"BrainPadDemo\" when you created it, you will have a namespace mismatch when you paste the above sample program into your project. Just change the namespace in the Program.cs window to match the namespace in the BrainPad Helper file and you should be good to go. Another option is to add a using statement at the top of the program file that references the namespace in the BrainPad helper file. If you created a project named \"BrainPadDemo\" and paste in code with a different namespace, you can add the line using BrainPadDemo; at the top of the pasted code to fix the namespace mismatch. The name following using must match the namespace in the BrainPad Helper file. Deploy the Program Make sure your BrainPad is plugged into the computer's USB port. Now hit the start button as shown in the above image (or hit the F5 key). If you've done everything correctly the program will compile and deploy to your device. The message \"Hello World!\" should appear on the BrainPad display, and the light bulb should start blinking. Congratulations! You're on your way to learning advanced programming on the BrainPad! What happened exactly? Our application began by running the BrainPad.Display.DrawText(0, 0, \"Hello!\") and BrainPad.Display.RefreshScreen() lines to instruct the display to show the text \"Hello!\" The line BrainPad.Display.DrawText(0, 0, \"Hello!\") is known as a function call. The name of the function is \"DrawText().\" This function is part of the \"Display\" object, which is part of the \"BrainPad\" object. The items listed in parenthesis (0, 0, \"Hello!\") are called the arguments of the function. In this case the first zero tells the BrainPad to display the text at the left side of the BrainPad display. If this number is increased the text will appear farther to the right on the screen. The second zero tells the BrainPad to print the text at the top of the display. If this number is increased the text will be printed lower on the screen. The third arugument, \"Hello!,\" tells the BrainPad what text to display on the screen. After the display lines are finished, the While True loop starts running. Code placed inside this while loop is executed in an infinite loop. This is why the LED keeps blinking and never stops."
  },
  "go-beyond/csharp/vb-to-csharp.html": {
    "href": "go-beyond/csharp/vb-to-csharp.html",
    "title": "Visual Basic to C#",
    "keywords": "Visual Basic to C# Visual Basic and C# are very similar. They are so similar that there are online converters that will convert Visual Basic to C# and vice versa. Here is one such Code Converter . Most of the BrainPad examples and projects will be built using C#. You can convert these examples into Visual Basic if you prefer."
  },
  "go-beyond/projects/3d-cube.html": {
    "href": "go-beyond/projects/3d-cube.html",
    "title": "3D Cube",
    "keywords": "3D Cube A simple wire-frame drawing of a three-dimensional cube. Difficulty: Easy Objective: 3D Math How It Works This program renders a three-dimensional cube on the BrainPad screen. As you tilt the BrainPad the cube is rotated simulating what it would look like if you were rotating the cube itself. The output of the X and Y axes of the accelerometer is also shown. The Code Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . using System; using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Program { class Vector3 { public double X; public double Y; public double Z; public Vector3(double X, double Y, double Z) { this.X = X; this.Y = Y; this.Z = Z; } } class Vector2 { public double X; public double Y; public Vector2(double X, double Y) { this.X = X; this.Y = Y; } } static void Translate3Dto2D(Vector3[] Points3D, Vector2[] Points2D, Vector3 Rotate, Vector3 Position) { int OFFSETX = 64; int OFFSETY = 32; int OFFSETZ = 50; double sinax = Math.Sin(Rotate.X * Math.PI / 180); double cosax = Math.Cos(Rotate.X * Math.PI / 180); double sinay = Math.Sin(Rotate.Y * Math.PI / 180); double cosay = Math.Cos(Rotate.Y * Math.PI / 180); double sinaz = Math.Sin(Rotate.Z * Math.PI / 180); double cosaz = Math.Cos(Rotate.Z * Math.PI / 180); for (int i = 0; i < 8; i++) { double x = Points3D[i].X; double y = Points3D[i].Y; double z = Points3D[i].Z; double yt = y * cosax - z * sinax; // rotate around the x axis double zt = y * sinax + z * cosax; // using the Y and Z for the rotation y = yt; z = zt; double xt = x * cosay - z * sinay; // rotate around the Y axis zt = x * sinay + z * cosay; // using X and Z x = xt; z = zt; xt = x * cosaz - y * sinaz; // finally rotate around the Z axis yt = x * sinaz + y * cosaz; // using X and Y x = xt; y = yt; x = x + Position.X; // add the object position offset y = y + Position.Y; // for both x and y z = z + OFFSETZ - Position.Z; // as well as Z Points2D[i].X = (x * 64 / z) + OFFSETX; Points2D[i].Y = (y * 64 / z) + OFFSETY; //BrainPad.ImageBuffer.DrawPoint((int)Points2D[i].X, (int)Points2D[i].Y); } } static void Main() { // our object in 3D space Vector3[] cube_points = new Vector3[8] { new Vector3(10,10,-10), new Vector3(-10,10,-10), new Vector3(-10,-10,-10), new Vector3(10,-10,-10), new Vector3(10,10,10), new Vector3(-10,10,10), new Vector3(-10,-10,10), new Vector3(10,-10,10), }; // what we get back in 2D space! Vector2[] cube2 = new Vector2[8] { new Vector2(0,0), new Vector2(0,0), new Vector2(0,0), new Vector2(0,0), new Vector2(0,0), new Vector2(0,0), new Vector2(0,0), new Vector2(0,0), }; // the connections between the \"dots\" int[] start = new int[12] { 0, 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3 }; int[] end = new int[12] { 1, 2, 3, 0, 5, 6, 7, 4, 4, 5, 6, 7 }; Vector3 rot = new Vector3(0, 0, 0); Vector3 pos = new Vector3(0, 0, 0); while (true) { double accelX = BrainPad.Accelerometer.ReadX(); double accelY = BrainPad.Accelerometer.ReadY(); BrainPad.Display.ClearScreen(); //rot.Z += 5; //rot.X += 5; rot.X = 360 - accelY * 50; rot.Y = accelX * 50; //pos.X += 1; Translate3Dto2D(cube_points, cube2, rot, pos); for (int i = 0; i < start.Length; i++) { // draw the lines that make up the object int vertex = start[i]; // temp = start vertex for this line int sx = (int)cube2[vertex].X; // set line start x to vertex[i] x position int sy = (int)cube2[vertex // set line start y to vertex[i] y position vertex = end[i]; // temp = end vertex for this line int ex = (int)cube2[vertex].X; // set line end x to vertex[i+1] x position int ey = (int)cube2[vertex].Y // set line end y to vertex[i+1] y position BrainPad.Display.DrawLine(sx, sy, ex, ey); } BrainPad.Display.DrawSmallText(0, 55, \"X: \" + (accelX * 100).ToString(\"F0\")); BrainPad.Display.DrawSmallText(80, 55, \"Y: \" + (accelY * 100).ToString(\"F0\")); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } } More Information About 3D Graphics With the advent of fast computers and powerful video game systems, three dimensional (3D) graphics have become commonplace. It used to be much more difficult for older, slower computers to display 3D graphics. Early attempts were rendered using a wire-frame representation -- just like this sample program does. To display this cube on the BrainPad, first a 3D model of the cube must be created. This model consists of X, Y, and Z coordinates for the location of each of the eight corners of the cube. The BrainPad display, as well as computer monitors and videogame displays, is only two dimensional. The three-dimensional cube must be translated into two dimensions before it can be displayed on the screen. This is done mathematically using geometry. An easy way to understand this is to pretend you are looking at the 3D cube through a window with one eye closed. The window would represent the BrainPad display or a computer screen. Now draw an imaginary line from each corner of the cube through the window to your open eye. Each of the corners of the 3D cube will have a corresponding point on the window where the imaginary line from that corner goes through (or intersects) the window. Each corner of the 3D cube is represented by three coordinates (X,Y, and Z). Each point on the 2D window is represented by only two coordinates (X and Y). Thus, we now have a 2D representation (the points on the window) of a 3D object (the cube outside of the window). Now we can draw the lines that represent the edges of the cube between the points on the window. We now have a wire-frame 2D image of the 3D cube. Every time the cube is rotated we must make a new 3D to 2D translation. Todays computers are so fast that they can render complex, almost life-like three-dimensional models quickly enough to make the realistic video games we have today. The computing power needed to do this is enormous -- some video game systems are capable of performing hundreds of billions of calculations per second! Yet the math used is all based on the same math we use to render this cube."
  },
  "go-beyond/projects/color-mixer.html": {
    "href": "go-beyond/projects/color-mixer.html",
    "title": "Color Mixer",
    "keywords": "Color Mixer Did you know that you can get any color by simply mixing different levels of red, green and blue? Difficulty: Easy Objective: Science How It Works We build a simple selection menu to select a color, which we then can increase and decrease. We are limiting the light to max level of 10 to protect your eyes since you will be looking directly at it. The max level is actually 100. The Code Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Program { static void Main() { int selection = 0; double[] LightBulbColor = new double[3]; BrainPad.Display.DrawScaledText(0, 45, \"Up/Down to select\", 1, 1); BrainPad.Display.DrawScaledText(0, 55, \"Right/Left to level\", 1, 1); BrainPad.Display.DrawScaledText(12, 9 * 0, \"Red : 0.0\", 1, 1); BrainPad.Display.DrawScaledText(12, 9 * 1, \"Green: 0.0\", 1, 1); BrainPad.Display.DrawScaledText(12, 9 * 2, \"Blue : 0.0\", 1, 1); while (true) { // The selectino pointer BrainPad.Display.DrawScaledText(0, selection * 9, \" \", 2, 1); if (BrainPad.Buttons.IsDownPressed() || selection == -1) { BrainPad.Buzzer.Beep(); selection++; if (selection >= 3) selection = 0; while (BrainPad.Buttons.IsDownPressed()) BrainPad.Wait.Minimum(); } if (BrainPad.Buttons.IsUpPressed() || selection == -1) { BrainPad.Buzzer.Beep(); selection--; if (selection < 0) selection = 2; while (BrainPad.Buttons.IsUpPressed()) BrainPad.Wait.Minimum(); } BrainPad.Display.DrawScaledText(0, selection * 9, \">\", 2, 1); // Change the color level if (BrainPad.Buttons.IsRightPressed()) { LightBulbColor[selection] += 0.3; if (LightBulbColor[selection] > 10) LightBulbColor[selection] = 10; BrainPad.Display.ClearPartOfScreen(60, 9 * selection, 18, 8); BrainPad.Display.DrawScaledText(54, 9 * selection, LightBulbColor[selection].ToString(\"N1\"), 1, 1); } if (BrainPad.Buttons.IsLeftPressed()) { LightBulbColor[selection] -= 0.3; if (LightBulbColor[selection] < 0) LightBulbColor[selection] = 0; BrainPad.Display.ClearPartOfScreen(60, 9 * selection, 18, 8); BrainPad.Display.DrawScaledText(54, 9 * selection, LightBulbColor[selection].ToString(\"N1\"), 1, 1); } // Set the color and show the screen BrainPad.LightBulb.TurnColor(LightBulbColor[0], LightBulbColor[1], LightBulbColor[2]); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } }"
  },
  "advanced/bare-metal.html": {
    "href": "advanced/bare-metal.html",
    "title": "Bare Metal",
    "keywords": "Bare Metal You can also write programs from scratch using one of the more traditional C/C++ development tools. The easiest option would be to start with the Mbed online compiler and then export your project. You can also use the free open source GNU GCC tools to build your programs, which is what we used to build the TinyCLR OS firmware. Another option is to use a commercial compiler like the Keil compiler and development environment. Keil tools are free for programs up to 32KB (MDK-Lite). Tip If you are not adding a SWD-JTAG tool, like ST-Link, follow the STM32 bootloader instructions on generating and loading DFU files. Keil Website Keil ARM MDK tools GNU ARM Tools (GCC) STM 32 Bootloader Instructions"
  },
  "advanced/mbed.html": {
    "href": "advanced/mbed.html",
    "title": "Mbed",
    "keywords": "Mbed Using Mbed with the BrainPad Mbed is an online compiler platform. There is nothing to install, just log in and start coding! When using Mbed to program the BrainPad, select the Nucleo-F401RE as your target platform. The F401RE uses the same processor as the BrainPad. When you have written and compiled your program, follow the instructions on the STM32 bootloader page to transfer the program to your BrainPad. This video shows how to use Mbed with the BrainPad. mbed Website Nucleo-F401RE STM 32 Bootloader Instructions"
  },
  "advanced/csharp/variables-and-nested-statements.html": {
    "href": "advanced/csharp/variables-and-nested-statements.html",
    "title": "Variables and Nested Statements",
    "keywords": "Variables and Nested Statements"
  },
  "advanced/vb/variables-and-nested-statements.html": {
    "href": "advanced/vb/variables-and-nested-statements.html",
    "title": "Variables and Nested Statements",
    "keywords": "Variables and Nested Statements Overview Students will learn about variables, strings, while loops and nested statements. Guidelines Prerequisites: None Ages 12 and up PC setup with Visual Studio 2017, TinyCLR OS and Nuget packages installed. Supplies: BrainPad and Micro USB cable. Arguments Arguments are values passed on to methods. For example, to set the frequency of the buzzer, a value is passed on to that method. The 3000 is the arguments. BrainPad.Buzzer.Start(3000) Arguments are also used when adding delays. Here, the 0.2 is the argument. BrainPad.Wait.Seconds(0.2) Variables can be constants, like the numbers used above. They can also be variables, which will be explained in the coming sections. Also, arguments can also be something completely different! Class Program Public Sub BrainPadSetup() 'Declared but not used End Sub Public Sub BrainPadLoop() If BrainPad.Buttons.IsPressed(BrainPad.Buttons.Button.Up) Then BrainPad.WriteDebugMessage(\"Up button is pressed\") Else BrainPad.WriteDebugMessage(\"Up button is not pressed\") End If End Sub End Class What is that argument used with Button.IsPressed() ? In this case, the Button.IsPressed takes an argument to specify which button is to be checked. This code BrainPad.Buttons.IsPressed(BrainPad.Buttons.Button.Up) Is much clearer than: BrainPad.Button.IsPressed(4) What is button 4? In fact, internally the up button may be number 4 but remembering this will be difficult. Exercise Try to use the wrong argument type then build the project to observe the error messages. Integer Variables Variable is a location in memory that is reserved for us to use. Instead of knowing where the memory is and how it is located, the system gives us an access to that memory using a name we select. Dim count As Integer The above line instructs the system to reserve (Dim) a variable that is named count and the variable type is an Integer. The name can be use any letters from the alphabet and any numbers but it must not start with a number and it can�t contain spaces. Here are few allowed name examples: Dim count123 As Integer Dim countMeIn As Integer Dim count2var As Integer Variables in small programs can use simply names. It can simply be just x . However, using a meaningful name is very important when writing any serious program, as there maybe tens, or hundreds, of variables. The variable now can store numbers. Note that the variable can be used in the equation and in the result as well. count = count + 2 The above code will add 2 to the count. Math can be used as well. count = 5 + result After selecting an appropriate name, an appropriate type is needed. The type tell the system how much memory to reserve for that one variable. The most widely used variable is an Integer, and can hold very large numbers, even negative numbers. We suggest the use for Integers for everything, except when fractions are needed. More on fractions later. Changing Tones Use the code below: Class Program Dim frequency As Integer Dim increment As Integer Public Sub BrainPadSetup() frequency = 0 increment = 0 End Sub Public Sub BrainPadLoop() If BrainPad.Button.IsUpPressed() Then increment = 100 End If If BrainPad.Button.IsDownPressed() Then increment = -100 End If If increment <> 0 Then frequency = frequency + increment increment = 0 BrainPad.Buzzer.Start(frequency) BrainPad.WriteDebugMessage(frequency.ToString()) BrainPad.Wait.Seconds(0.2) BrainPad.Buzzer.Stop() End If End Sub End Class The previous example loops 5 times every second and sets the buzzer to a frequency. The frequency is a variable, also named frequency in this example. The buttons will be checked and when the up button is pressed the frequency is incremented by 100 and when the down button is pressed the frequency is decremented by 100. The value held by the frequency variable is also printed using the Debug.Print statement. Can we now determine the highest frequency a person can hear? The if-statement with Variables The same way the if-statement was used to check if a button was pressed, it can be used with variables. If frequency is larger than 6000 then turn the red light off, else turn the red light off. Add this code inside the while-loop in the previous code example. If frequency > 6000 Then BrainPad.LightBulb.TurnRed() Else BrainPad. LightBulb.TurnOff() End If Exercise Add a variable that starts at 0 and then it is incremented by 1 in every loop. Once the variable reaches 1000, turn the LightBulb yellow. Print the variable value on the output window and make sure its incrementing, then verify the LightBulb turns yellow when the variable go over 1000. Inspecting Variables Printing the variable value worked well for small programs with a single variable. It is not practical to continuously print every variable out. Instead, we can use the debugger feature to pause the code and inspect variables. Class Program Dim count As Integer = 0 Dim increment As Integer = 0 Public Sub BrainPadSetup() End Sub Public Sub BrainPadLoop() count = count + 1 BrainPad.DebugPrint(count) BrainPad.Wait.Seconds(0.2) End Sub End Class Add a breakpoint in the loop in the previous program and step through code. Move the mouse over the count variable and wait a second. A pop up window will come up showing the value of the count variable. The watch windows can be used with important variables that need to be inspected regularly. Locate the watch window and type the variable name in the left sell. This will show the variable value and type. Exercise Run the previous program for few loops, then pause the program, or add a breakpoint. Inspect the value on the watch window. It should be something other than 0. Change the value manually to 0 and then re-run the program and observe how the output window now shows the variable going back counting from 0. Double Variable While an Integer can hold very large numbers, it can�t hold fractions. For example, there is no way to set an integer to 0.5 or 123.8. The variable type Double should be used whenever fractions are needed. Why not use a Double variable since it can hold large numbers and fractions? You can, but it requires more memory and processing so it isn't as efficient. Class Program Dim frequency As Double Dim increment As Integer Public Sub BrainPadSetup() frequency = 0 increment = 0 End Sub Public Sub BrainPadLoop() If BrainPad.Button.IsUpPressed() Then increment = 100 End If If BrainPad.Button.IsDownPressed() Then increment = -100 End If If increment <> 0 Then frequency = frequency + increment increment = 0 BrainPad.Buzzer.Start(CType(frequency, Integer)) BrainPad.WriteMessageOnComputer(frequency) BrainPad.Wait.Seconds(0.2) BrainPad.Buzzer.Stop() End If End Sub End Class The previous example uses a Double instead of an Integer for the frequency. Since the Buzzer.Start() method expects an integer, the variable need to be converted using the CType(). This is demonstrating how using Double for everything is not desirable. Time to go back and have fun with our favorite green light! This example will turn the green light on for a specific time, set by a variable called delay. It then turns the light off for the same length of time. Pressing the up and down buttons control the delay variable, causing the light to be on and off for longer or shorter periods. The variable is also printed out using DebugOutput() . Class Program Dim delay As Double Public Sub BrainPadSetup() delay = 0.2 End Sub Public Sub BrainPadLoop() If BrainPad.Buttons.IsPressed(BrainPad.Buttons.Button.Up) Then delay = delay + 0.2 End If If BrainPad.Buttons.IsPressed(BrainPad.Buttons.Button.Down) Then delay = delay - 0.2 End If BrainPad.WriteDebugMessage(delay) BrainPad.LightBulb.TurnGreen() BrainPad.Wait.Seconds(delay) BrainPad.LightBulb.TurnOff() BrainPad.Wait.Seconds(delay) End Sub End Class Returned Values Some methods return a value, like when reading the light sensor. This value can be placed into a variable and then the variable can be used with if-statements. We have lights bulb and a light sensor on the BrainPad. Why not turn the light on when it is dark? This can be tested by turning the lights off inside the room or by placing a finger over the light sensor to block the light. Class Program Dim level As Double Public Sub BrainPadSetup() level = 0 End Sub Public Sub BrainPadLoop() level = BrainPad.LightSensor.ReadLightLevel() BrainPad.WriteDebugMessage(level) If level > 0.5 Then BrainPad.LightBulb.TurnOn() Else BrainPad.LightBulb.TurnOff() End If End Sub End Class How do we know what value to use as the threshold on when to turn the light bulb on? This is a perfect example on where inspecting variables is needed. Run the program and test by placing a finger over the light sensor to block the light. This may not work nicely and you need to adjust the threshold from 0.5 to something else. Take a look at the output window to see the light levels to determine what value work best for your needs. Then stop the program, change the threshold and then run the program again to test the results. Exercise Modify the last program to have a way to set the threshold using the up button. Hint, the threshold was a constant before but now it is going to be a variable that is set to whatever the light sensor returns when the button is pressed. Name the variable threshold and make sure it is type Double. Strings A string is a type of variable that holds text. BrainPad.WriteDebugMessage(\"Hello World!\") It is important to remember that the integer 2 and the string \"2\" are not the same thing. This maybe the same for us but internally in the system they are very different. Assuming x is an Integer, what value is in variable x? x = 2 + 2 The result is what you expect, 4. But now assume str is a string variable, what is the value of str? str = \"2\" + \"2\" The string is just text, not a number. When adding strings, the result is a string that combines the strings. The result from above is \"22\". This should make more sense if you try this example. str = \"Hello number \" + \"2\" The result is \"Hello number 2\". Note how even a space makes a difference in the last example. This code will generate an error since 2 is a number here not a string. str = \"Hello number \" + 2 ToString() One of the important built in method for variables is the ToString() method. This method will take the value from the variable and converts it into a string. Class Program Dim count As Integer=0 Public Sub BrainPadSetup() count = 0 End Sub Public Sub BrainPadLoop() count = count + 1 BrainPad.DebugOutput(\"Count: \" + count.ToString()) End Sub End Class The prior example uses a variable type integer that starts at zero and increments by one in every loop. It will then print the variable value in the Output Window. Exercise Show something like this in the output window: Finite while-loops The While loop and BrainPadLoop() have been used extensively so far. The While loop will run while something is true and since we have passed it the value True then it will loop forever. Is this statement true? 1 = 1 Yes 1 equals 1, that is true! So keeping that in mind, we can make a while-loop keep looping forever using this statement. Class Program Public Sub BrainPadSetup() Dim count As Integer count = 0 While 1 = 1 count = count + 1 BrainPad.WriteDebugMessage(\"Count: \" + count.ToString()) End While End Sub Public Sub BrainPadLoop() End Sub End Class Or True can simply be used. Class Program Public Sub BrainPadSetup() Dim count As Integer count = 0 While True count = count + 1 BrainPad.WriteDebugMessage(\"Count: \" + count.ToString()) End While End Sub Public Sub BrainPadLoop() End Sub End Class A While loop can also be finite, meaning will stop looping at some point. Class Program Public Sub BrainPadSetup() Dim count As Integer count = 0 While count < 10 count = count + 1 BrainPad.WriteDebugMessage(\"Count: \" + count.ToString()) End While End Sub Public Sub BrainPadLoop() End Sub End Class What did the last program do? It printed the count from 1 to 10. But count started at 0, not one. Shouldn't it print count 0? Time for debugging (troubleshooting). Start by setting a breakpoint at count = 0 and then step in the code to see what the value of count is (use watch window) and then see why the value 0 was never printed. Think about a fix before looking at the next code. The fix is very easy! Class Program Public Sub BrainPadSetup() Dim count As Integer count = 0 While count < 10 BrainPad.WriteDebugMessage(\"Count: \" + count.ToString()) count = count + 1 End While End Sub Public Sub BrainPadLoop() End Sub End Class What about the 10? Shouldn't the program print Count: 10? The answer is in the while-loop. In plain English, it says: run the following code as long as count is less than 10. Since 10 is not less than 10 then 10 will not be printed. The while-loop can be improved like this: While count <= 10 This new statement says run the loop as long as the count is less than or equals to 10. Exercise Write a program the prints all even numbers between 6 to 66. Nesting Some programs will have loops inside loops, or if-statements inside loops, maybe inside other if-statements and more loops! This is called nesting. While programmers should try to keep this simple to understand, nesting is sometimes required. How do we write a program that prints 1 to 10 repeatedly forever? This is accomplished by having two nested while-loops. One that counts 1 to 10, which goes inside another loop that loops infinitely. Class Program Public Sub BrainPadSetup() Dim count As Integer count = 1 While True While count < 10 BrainPad.WriteDebugMessage(\"Count: \" + count.ToString()) count = count + 1 End While End While End Sub Public Sub BrainPadLoop() End Sub End Class The above program will not work. It will print 1 to 10 one time only then the program will not end and it will not print anything after. Time again for debugging the code to determine what the issue is. Run the program and determine the cause of the error. The fix is simple but try to find it before peeking at the fixed code. Class Program Public Sub BrainPadSetup() Dim count As Integer count = 0 While True count = 1 While count < 10 BrainPad.WriteDebugMessage(\"Count: \" + count.ToString()) count = count + 1 End While End While End Sub Public Sub BrainPadLoop() End Sub End Class Exercise Write a program that prints 0 to 10 repeatedly when the up button is not pressed when it is bright. If it is dark the button doesn�t do anything. Do not use And , instead nest the if-statements."
  },
  "get-inspiderd/ai.html": {
    "href": "get-inspiderd/ai.html",
    "title": "Artificial Intelligence",
    "keywords": "Artificial Intelligence Tick Tak Toe"
  },
  "get-inspiderd/electronics.html": {
    "href": "get-inspiderd/electronics.html",
    "title": "Snap Circuits",
    "keywords": "Snap Circuits Snap Circuits is a fun and easy way to build your own circuits and learn about electronics. The components and wires snap together using the same type of snaps used for clothing. This makes it fast and easy to assemble and disassemble circuits. They have full color manuals showing pictures of each of the hundreds of possible projects you can build. Some of our favorite Snap Circuits: MikroBUS Plug-and-play Click Modules This is an easy option as these modules simply plug in. There are hundreds of available options https://shop.mikroe.com/click Advanced users can add any of the available modules. Some modules that we've tested and written programs for are shown below. MikroBUS FM Click Module MikroBUS TouchClamp Click Module MikroBUS IR Click Module"
  },
  "go-beyond/other-software/intro.html": {
    "href": "go-beyond/other-software/intro.html",
    "title": "Other Software Options",
    "keywords": "Other Software Options The BrainPad focuses on Start Making (link) with Microsoft MakeCode and lets you Go Beyond (link) with TinyCLR OS and .NET. However, there are other software options that also work on the BrainPad. We only give you a starting point in case you want to test the other possibilities. Arduino If you are familiar with the Arduino programming environment you can use it to program the BrainPad in C++. We encourage students to learn Visual Studio as it is more widely used professionally, but Arduino has become a very common and widely accepted standard among students, hobbyists, and engineers. Click here to get started with Arduino on the BrainPad . MicroPython You can also program the BrainPad in MicroPython. The BrainPad is a great platform for those who know or wish to learn the Python programming language. The Python computer language emphasizes code readability and allows programmers to write programs using fewer lines of code than most other common computer languages. Click here to get started in MicroPython on the BrainPad . Mbed Mbed is a free online development environment that can be used to program the BrainPad in C or C++ without downloading or installing anything. Mbed is not as friendly a development environment as VisualStudio -- you don't get the TinyCLR operating system or the advanced features and debugging of Visual Studio. The advantage of Mbed is that the entire system is completely web based. There is no software to install, maintain or update on your computer, and it is always available on any computer anywhere in the world. Click here to get started using Mbed with the BrainPad Bare Metal You can also write programs from scratch using one of the more traditional C/C++ development tools. Many of these tools are available for free. Click here to get started with bare metal BrainPad programming"
  },
  "go-beyond/other-software/mbed.html": {
    "href": "go-beyond/other-software/mbed.html",
    "title": "Mbed",
    "keywords": "Mbed Using Mbed with the BrainPad Mbed is an online compiler platform. There is nothing to install, just log in and start coding! When using Mbed to program the BrainPad, select the Nucleo-F401RE as your target platform. The F401RE uses the same processor as the BrainPad. When you have written and compiled your program, follow the instructions on genearing and loading DFU Files . This video shows how to use Mbed with the BrainPad. mbed Website Nucleo-F401RE DFU Files Forum discussion about using Mbed to program the BrainPad"
  },
  "go-beyond/projects/flappy-bird.html": {
    "href": "go-beyond/projects/flappy-bird.html",
    "title": "Flappy Bird",
    "keywords": "Flappy Bird Difficulty: Easy Objective: Game"
  },
  "go-beyond/projects/intro.html": {
    "href": "go-beyond/projects/intro.html",
    "title": "Projects",
    "keywords": "Projects This is a collection of C# projects ranging from easy to advanced. If you want to use Visual Basic, please refer to the C# to Visual Basic page. Tip Also see the simpler Projects Space Invasion Tilt Etch A Sketch Etch A Sketch Pong Screen TicTacToe Live TicTacToe 3D Cube Color Mixer Electronic Dice Flappy Bird Stepper Motors You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "go-beyond/projects/space-invasion.html": {
    "href": "go-beyond/projects/space-invasion.html",
    "title": "Space Invasion",
    "keywords": "Space Invasion Difficulty: Medium Objective: Retro gaming This game was inspired by the Space Invaders game from the 80s. It is fun to play and easy to program. Start a C# TinyCLR Application project. You can also use VB if you want to convert the code from C# to VB . The Ship When you finish this section, you will have a ship on the screen that can be moved using the left and right buttons. The Main Loop In this game we have a loop where we process the objects we have moving on screen, like the ship. Once everything is processed, we RefreshScreen . As always, we need to add a minimum delay to give the system time to process any other internal tasks. static void Main() { while(true) { ProcessShip(); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } We also want to draw two lines to define the area of play. static void Main() { BrainPad.Display.DrawLine(90, 0, 90, 64); BrainPad.Display.DrawLine(0, 0, 0, 64); while (true) { ProcessShip(); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } Sprites In computer programming sprites are small pictures or objects that are shown on the screen and can be moved or manipulated as a single entity. In this game the space ship, the bullets, and the monster are all sprites. We will create a sprite class which will be used to keep track of each sprite's position and size. This class will also provide methods to draw it and erase it. class Sprite { Picture Pic; public int X, Y; public int Width = 8; public int Height = 5; public Sprite(Picture p) { Pic = p; Width = p.Width; Height = p.Height; } public void Clear() { BrainPad.Display.ClearPartOfScreen(X, Y, Pic.Width, Pic.Height); } public void Draw() { BrainPad.Display.DrawPicture(X, Y, Pic); } } Creating The Ship Let's use the Sprite class we made in the last step to create the Ship. static Sprite Ship = new Sprite(BrainPad.Display.CreatePicture(8, 5, new byte[] { 0,0,0,1,1,0,0,0, 0,0,0,1,1,0,0,0, 0,1,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,1, })) { Y = 64 - 5 , X = 50}; Moving The Ship The ship will always be at the bottom of the screen. Its Y or vertical position never changes. The ship's Y position is set at the display's maximum height (64) minus the height of the ship (5). The ship's Y position is set when we create it. We now need to check the buttons and update the ship's X (horizontal) position. We also check the X position to make sure the ship stays within the playing area. static void ProcessShip() { Ship.Clear(); if (BrainPad.Buttons.IsLeftPressed()) Ship.X -= 5; if (BrainPad.Buttons.IsRightPressed()) Ship.X += 5; if (Ship.X < 5) Ship.X = 5; if (Ship.X > 85 - Ship.Width) Ship.X = 85 - Ship.Width; Ship.Draw(); } Testing The Ship Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . Time to load the code and test it out. Here is the code so far. using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Sprite { Picture Pic; public int X, Y; public int Width = 8; public int Height = 5; public Sprite(Picture p) { Pic = p; Width = p.Width; Height = p.Height; } public void Clear() { BrainPad.Display.ClearPartOfScreen(X, Y, Pic.Width, Pic.Height); } public void Draw() { BrainPad.Display.DrawPicture(X, Y, Pic); } } class Program { static Sprite Ship = new Sprite(BrainPad.Display.CreatePicture(8, 5, new byte[] { 0,0,0,1,1,0,0,0, 0,0,0,1,1,0,0,0, 0,1,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,1, })) { Y = 64 - 5, X = 50 }; static void ProcessShip() { Ship.Clear(); if (BrainPad.Buttons.IsLeftPressed()) Ship.X -= 5; if (BrainPad.Buttons.IsRightPressed()) Ship.X += 5; if (Ship.X < 5) Ship.X = 5; if (Ship.X > 85 - Ship.Width) Ship.X = 85 - Ship.Width; Ship.Draw(); } static void Main() { BrainPad.Display.DrawLine(90, 0, 90, 64); BrainPad.Display.DrawLine(0, 0, 0, 64); while (true) { ProcessShip(); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } } The Bullet This section will add a bullet that shoots when the up button is pressed. The sound will be added later. Creating The Bullet The bullet's Y positions starts at -10, outside of the screen boundries. This is done so the bullet will not be seen until the player shoots at the monster. The Y position of the bullet is also used to tell the program not to process it until it is fired at the monster. static Sprite Bullet = new Sprite(BrainPad.Display.CreatePicture(2, 2, new byte[] { 1,1, 1,1, })) { Y = - 10 }; Moving The Bullet The bullet will always start at the middle of the ship and will move upwards until it is leaves the screen boundries. To generate a shooting sound, we cheat somewhat and use the Y location to generate a sweeping frequency! static void ProcessBullet() { if (Bullet.Y > - 5) { Bullet.Clear(); Bullet.Y -= 5; Bullet.Draw(); BrainPad.Buzzer.StartBuzzing(3000 - Bullet.Y * 30); } else { BrainPad.Buzzer.StopBuzzing(); if (BrainPad.Buttons.IsUpPressed()) { Bullet.X = Ship.X + Ship.Width / 2; Bullet.Y = 55; } } } Testing The Bullet This is the game code so far. Things are getting more interesting! using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Sprite { Picture Pic; public int X, Y; public int Width = 8; public int Height = 5; public Sprite(Picture p) { Pic = p; Width = p.Width; Height = p.Height; } public void Clear() { BrainPad.Display.ClearPartOfScreen(X, Y, Pic.Width, Pic.Height); } public void Draw() { BrainPad.Display.DrawPicture(X, Y, Pic); } } class Program { static Sprite Ship = new Sprite(BrainPad.Display.CreatePicture(8, 5, new byte[] { 0,0,0,1,1,0,0,0, 0,0,0,1,1,0,0,0, 0,1,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,1, })) { Y = 64 - 5 , X = 50}; static Sprite Bullet = new Sprite(BrainPad.Display.CreatePicture(2, 2, new byte[] { 1,1, 1,1, })) { Y = - 10 }; static void ProcessBullet() { if (Bullet.Y > - 5) { Bullet.Clear(); Bullet.Y -= 5; Bullet.Draw(); BrainPad.Buzzer.StartBuzzing(3000 - Bullet.Y * 30); } else { BrainPad.Buzzer.StopBuzzing(); if (BrainPad.Buttons.IsUpPressed()) { Bullet.X = Ship.X + Ship.Width / 2; Bullet.Y = 55; } } } static void ProcessShip() { Ship.Clear(); if (BrainPad.Buttons.IsLeftPressed()) Ship.X -= 5; if (BrainPad.Buttons.IsRightPressed()) Ship.X += 5; if (Ship.X < 5) Ship.X = 5; if (Ship.X > 85 - Ship.Width) Ship.X = 85 - Ship.Width; Ship.Draw(); } static void Main() { BrainPad.Display.DrawLine(90, 0, 90, 64); BrainPad.Display.DrawLine(0, 0, 0, 64); while (true) { ProcessShip(); ProcessBullet(); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } } The Monster The monster (invader) will move left and right on the screen. Every time it hits the edge of the area of play it will reverse direction and descend a little, getting closer and closer to our ship. Creating The Monster static Sprite Monster = new Sprite(BrainPad.Display.CreatePicture(8, 8, new byte[] { 0,0,0,1,1,0,0,0, 0,0,1,1,1,1,0,0, 0,1,1,1,1,1,1,0, 1,1,0,1,1,0,1,1, 1,1,1,1,1,1,1,1, 0,0,1,0,0,1,0,0, 0,1,0,1,1,0,1,0, 1,0,1,0,0,1,0,1, })) { X = 41 }; Moving The Monster static int MonsterDelta = 5; static void ProcessMonster() { Monster.Clear(); Monster.X += MonsterDelta; if (Monster.X < 5 || Monster.X > 85-Monster.Width) { MonsterDelta *= -1;// Reverse Monster.Y += 10; } Monster.Draw(); } Testing The Monster The monster will move down and go out of view off the bottom of the screen. We are not checking for collisions yet. You have to reset the BrainPad to see the monster again. using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Sprite { Picture Pic; public int X, Y; public int Width = 8; public int Height = 5; public Sprite(Picture p) { Pic = p; Width = p.Width; Height = p.Height; } public void Clear() { BrainPad.Display.ClearPartOfScreen(X, Y, Pic.Width, Pic.Height); } public void Draw() { BrainPad.Display.DrawPicture(X, Y, Pic); } } class Program { static Sprite Ship = new Sprite(BrainPad.Display.CreatePicture(8, 5, new byte[] { 0,0,0,1,1,0,0,0, 0,0,0,1,1,0,0,0, 0,1,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,1, })) { Y = 64 - 5 , X = 50}; static Sprite Bullet = new Sprite(BrainPad.Display.CreatePicture(2, 2, new byte[] { 1,1, 1,1, })) { Y = - 10 }; static Sprite Monster = new Sprite(BrainPad.Display.CreatePicture(8, 8, new byte[] { 0,0,0,1,1,0,0,0, 0,0,1,1,1,1,0,0, 0,1,1,1,1,1,1,0, 1,1,0,1,1,0,1,1, 1,1,1,1,1,1,1,1, 0,0,1,0,0,1,0,0, 0,1,0,1,1,0,1,0, 1,0,1,0,0,1,0,1, })) { X = 41 }; static void ProcessBullet() { if (Bullet.Y > - 5) { Bullet.Clear(); Bullet.Y -= 5; Bullet.Draw(); BrainPad.Buzzer.StartBuzzing(3000 - Bullet.Y * 30); } else { BrainPad.Buzzer.StopBuzzing(); if (BrainPad.Buttons.IsUpPressed()) { Bullet.X = Ship.X + Ship.Width / 2; Bullet.Y = 55; } } } static void ProcessShip() { Ship.Clear(); if (BrainPad.Buttons.IsLeftPressed()) Ship.X -= 5; if (BrainPad.Buttons.IsRightPressed()) Ship.X += 5; if (Ship.X < 5) Ship.X = 5; if (Ship.X > 85 - Ship.Width) Ship.X = 85 - Ship.Width; Ship.Draw(); } static int MonsterDelta = 5; static void ProcessMonster() { Monster.Clear(); Monster.X += MonsterDelta; if (Monster.X < 5 || Monster.X > 85-Monster.Width) { MonsterDelta *= -1;// Reverse Monster.Y += 10; } Monster.Draw(); } static void Main() { BrainPad.Display.DrawLine(90, 0, 90, 64); BrainPad.Display.DrawLine(0, 0, 0, 64); while (true) { ProcessShip(); ProcessBullet(); ProcessMonster(); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } } Checking for Collisions Finally, we want to see if the bullet has hit our monster or if the monster has hit the player. In both cases, we want to play some cool sound effects. Check to see if bullet has hit the monster: if (Bullet.X >= Monster.X && Bullet.X <= Monster.X + Monster.Width && Bullet.Y >= Monster.Y && Bullet.Y <= Monster.Y + Monster.Height) { for (int i = 0; i < 3; i++) { for (int f = 1000; f < 6000; f += 500) { BrainPad.Buzzer.StartBuzzing(f); BrainPad.Wait.Minimum(); } } BrainPad.Buzzer.StopBuzzing(); Bullet.Clear(); Monster.Clear(); Monster.Y = 0; Bullet.Y = -5; } Or, if the monster has hit us: if (Monster.Y > 40) { if (Ship.X > Monster.X && Ship.X < Monster.X + Ship.Width) { for (int f = 2000; f > 200; f -= 200) { BrainPad.Buzzer.StartBuzzing(f); BrainPad.Wait.Minimum(); } BrainPad.Wait.Seconds(1); BrainPad.Buzzer.StopBuzzing(); Monster.Clear(); Monster.Y = 0; } } The Complete Project using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Sprite { Picture Pic; public int X, Y; public int Width = 8; public int Height = 5; public Sprite(Picture p) { Pic = p; Width = p.Width; Height = p.Height; } public void Clear() { BrainPad.Display.ClearPartOfScreen(X, Y, Pic.Width, Pic.Height); } public void Draw() { BrainPad.Display.DrawPicture(X, Y, Pic); } } class Program { static Sprite Ship = new Sprite(BrainPad.Display.CreatePicture(8, 5, new byte[] { 0,0,0,1,1,0,0,0, 0,0,0,1,1,0,0,0, 0,1,1,1,1,1,1,0, 1,1,1,1,1,1,1,1, 1,0,0,0,0,0,0,1, })) { Y = 64 - 5 , X = 50}; static Sprite Bullet = new Sprite(BrainPad.Display.CreatePicture(2, 2, new byte[] { 1,1, 1,1, })) { Y = - 10 }; static Sprite Monster = new Sprite(BrainPad.Display.CreatePicture(8, 8, new byte[] { 0,0,0,1,1,0,0,0, 0,0,1,1,1,1,0,0, 0,1,1,1,1,1,1,0, 1,1,0,1,1,0,1,1, 1,1,1,1,1,1,1,1, 0,0,1,0,0,1,0,0, 0,1,0,1,1,0,1,0, 1,0,1,0,0,1,0,1, })) { X = 41 }; static void ProcessBullet() { if (Bullet.Y > - 5) { Bullet.Clear(); Bullet.Y -= 5; Bullet.Draw(); BrainPad.Buzzer.StartBuzzing(3000 - Bullet.Y * 30); } else { BrainPad.Buzzer.StopBuzzing(); if (BrainPad.Buttons.IsUpPressed()) { Bullet.X = Ship.X + Ship.Width / 2; Bullet.Y = 55; } } } static void ProcessShip() { Ship.Clear(); if (BrainPad.Buttons.IsLeftPressed()) Ship.X -= 5; if (BrainPad.Buttons.IsRightPressed()) Ship.X += 5; if (Ship.X < 5) Ship.X = 5; if (Ship.X > 85 - Ship.Width) Ship.X = 85 - Ship.Width; Ship.Draw(); } static int MonsterDelta = 5; static void ProcessMonster() { Monster.Clear(); Monster.X += MonsterDelta; if (Monster.X < 5 || Monster.X > 85-Monster.Width) { MonsterDelta *= -1;// Reverse Monster.Y += 10; } Monster.Draw(); } static void ProcessCollisions() { // Check the bullet if (Bullet.X >= Monster.X && Bullet.X <= Monster.X + Monster.Width && Bullet.Y >= Monster.Y && Bullet.Y <= Monster.Y + Monster.Height) { for (int i = 0; i < 3; i++) { for (int f = 1000; f < 6000; f += 500) { BrainPad.Buzzer.StartBuzzing(f); BrainPad.Wait.Minimum(); } } BrainPad.Buzzer.StopBuzzing(); Bullet.Clear(); Monster.Clear(); Monster.Y = 0; Bullet.Y = -5; } // Did we lose? if (Monster.Y > 40) { if (Ship.X > Monster.X && Ship.X < Monster.X + Ship.Width) { for (int f = 2000; f > 200; f -= 200) { BrainPad.Buzzer.StartBuzzing(f); BrainPad.Wait.Minimum(); } BrainPad.Wait.Seconds(1); BrainPad.Buzzer.StopBuzzing(); Monster.Clear(); Monster.Y = 0; } } } static void Main() { BrainPad.Display.DrawLine(90, 0, 90, 64); BrainPad.Display.DrawLine(0, 0, 0, 64); while (true) { ProcessCollisions(); ProcessShip(); ProcessBullet(); ProcessMonster(); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } } } } What Is Next? In the area on the right we need to show how many lives are left. Perhaps we could draw three ships at the upper right of the screen to represent three lives? We also need to show the score. Would the lower right corner be good place? Just like before, add ProcessLives() and ProcessScore() methods. This should be a fun exercise! Need more of a challenge? Make the monster should move faster as the score increases."
  },
  "go-beyond/projects/stepper-motors.html": {
    "href": "go-beyond/projects/stepper-motors.html",
    "title": "Stepper Motors",
    "keywords": "Stepper Motors This project is still under development. The following Tech Talk discusses stepper motors and their use."
  },
  "resources/intro.html": {
    "href": "resources/intro.html",
    "title": "Resources",
    "keywords": "Resources This is a quick reference page for miscellaneous BrainPad resources. Communities BrainPad Discussion Forum Microsoft MakeCode for the BrainPad BrainPad Microcontroller Information STM32F401RE Product Page STM32F401RE Datasheet"
  },
  "resources/media.html": {
    "href": "resources/media.html",
    "title": "Media",
    "keywords": "Media High-Res Images BrainPad Logo BrainPad PNG Image BrainPad Vector Image Schematics BrainPad BP2 Rev B (2018 Production) BrainPad BP1 Rev A (2017 Pre-Production) BrainPad .NET Rev D (Original Concept)"
  },
  "go-beyond/components/servo-motors.html": {
    "href": "go-beyond/components/servo-motors.html",
    "title": "Servo Motors",
    "keywords": "Servo Motors The BrainPad has built in support for two servo motors. These can be either continuous or positional servo motors. Continuous servo motors can have their speed and direction controlled but there is no control over their position. They are capabable of rotating continously in either direction. Positional servo motors only accept position commands. Positional servo motors only rotate part way through a revolution, usually turning up to half of a revolution (180 degrees). While you can tell a servo motor to go to a specific position, you have no control over how fast it will get there. The positional servo motor will move to a given position as quickly as possible, but it's speed depends on how much load is put on the motor. Servo Motor Methods BrainPad.ServoMotors.ServoOne.ConfigureAsContinuous(bool inverted) (A true argument will make the motor move in the opposite direction.) BrainPad.ServoMotors.ServoTwo.ConfigureAsContinuous(bool inverted) (A true argument will make the motor move in the opposite direction.) BrainPad.ServoMotors.ServoOne.ConfigureAsPositional(bool inverted) (A true argument will invert the position so the 0 degree position becomes the 180 degree position and vice versa.) BrainPad.ServoMotors.ServoTwo.ConfigureAsPositional(bool inverted) (A true argument will invert the position so the 0 degree position becomes the 180 degree position and vice versa.) BrainPad.ServoMotors.ServoOne.ConfigurePulseParameters(double minimumPulseWidth, double maximumPulseWidth) (Pulse width in milliseconds) BrainPad.ServoMotors.ServoTwo.ConfigurePulseParameters(double minimumPulseWidth, double maximumPulseWidth) (Pulse width in milliseconds) BrainPad.ServoMotors.ServoOne.Set(double value) (allowable position from 0 to 180 degrees for positional motors, allowable speed from -100% to 100% for continuous motors.) BrainPad.ServoMotors.ServoTwo.Set(double value) (allowable position from 0 to 180 degrees for positional motors, allowable speed from -100% to 100% for continuous motors.) BrainPad.ServoMotors.ServoOne.Stop() BrainPad.ServoMotors.ServoTwo.Stop() Servo Motor Sample Code Positional Servo Example The following program configures servo one for a servo motor that expects positional pulses in the one to two millisecond range. It then moves the motor to the zero degree position, waits five seconds, and then moves the motor to the 180 degree position. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing the just the main method in the original program. static void Main() { BrainPad.ServoMotors.ServoOne.ConfigureAsPositional(false); BrainPad.ServoMotors.ServoOne.ConfigurePulseParameters(1.0, 2.0); BrainPad.ServoMotors.ServoOne.Set(0.0); BrainPad.Wait.Seconds(5.0); BrainPad.ServoMotors.ServoOne.Set(180.0); } Continuous Servo Example The following program configures servo two for connection to a continous servo motor. The program moves the motor for five seconds at 100 percent speed in one direction, and then reverses direction for 5 seconds at 60 percent speed. It then stops the motor. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { BrainPad.ServoMotors.ServoTwo.ConfigureAsContinuous(false); BrainPad.ServoMotors.ServoTwo.Set(100); BrainPad.Wait.Seconds(5); BrainPad.ServoMotors.ServoTwo.Set(-60); BrainPad.Wait.Seconds(5); BrainPad.ServoMotors.ServoTwo.Set(0); }"
  },
  "go-beyond/other-software/bare-metal.html": {
    "href": "go-beyond/other-software/bare-metal.html",
    "title": "Bare Metal",
    "keywords": "Bare Metal You can also write programs from scratch using one of the more traditional C/C++ development tools. The easiest option would be to start with the Mbed online compiler and then export your project. You can also use the free open source GNU GCC tools to build your programs, which is what we used to build the TinyCLR OS firmware. Another option is to use a commercial compiler like the Keil compiler and development environment. Keil tools are free for programs up to 32KB (MDK-Lite). Keil Website Keil ARM MDK tools GNU ARM Tools (GCC) DFU Files"
  },
  "go-beyond/other-software/micropython.html": {
    "href": "go-beyond/other-software/micropython.html",
    "title": "MicroPython",
    "keywords": "MicroPython Using MicroPython with the BrainPad MicroPython allows tiny systems to run Python 3, with a small subset of the standard library. The STM32F4 is already one of available ports, making it easier to run MicroPython on the BrainPad. This video shows the steps needed to use MicroPython on the BrainPad. MicroPython Website The MicroPython project GitHub repo This GitHub repo has some nice Micropython examples. DFU Files"
  },
  "go-beyond/projects/etch-a-sketch.html": {
    "href": "go-beyond/projects/etch-a-sketch.html",
    "title": "Etch A Sketch",
    "keywords": "Etch A Sketch This classic game now works on the BrainPad. Simply use the buttons to sketch. Difficulty: Easy Objective: Gaming, Drawing How It Works This program is simple. We draw a circle on the screen and move it when the buttons are pressed. The Code Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Program { static void Main() { BrainPad.Display.DrawSmallText(0, 57, \"Use Buttons to Draw\"); BrainPad.Display.DrawLine(0, 55, 127, 55); int x = 64, y = 32; while (true) { if (BrainPad.Buttons.IsDownPressed()) y++; if (BrainPad.Buttons.IsUpPressed()) y--; if (BrainPad.Buttons.IsLeftPressed()) x--; if (BrainPad.Buttons.IsRightPressed()) x++; if (x < 0) x = 0; if (y < 0) y = 0; if (x > 127) x = 127; if (y > 50) y = 50; BrainPad.Display.ClearPoint(x, y); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); BrainPad.Display.DrawPoint(x, y); BrainPad.Display.RefreshScreen(); } } } }"
  },
  "go-beyond/projects/screen-tictactoe.html": {
    "href": "go-beyond/projects/screen-tictactoe.html",
    "title": "Screen Tic Tac Toe",
    "keywords": "Screen Tic Tac Toe"
  },
  "go-beyond/vb/intro.html": {
    "href": "go-beyond/vb/intro.html",
    "title": "Introduction to Visual Basic",
    "keywords": "Introduction to Visual Basic Visual Basic is a very popular Microsoft .NET programming language. While being as powerful as other programming languages, it is perhaps a little easier for beginners. Visual Basic is more like plain English than other programming languages, and you don't have to type a semicolon (;) at the end of each line like you do with C, C++, and C#. Visual Basic Introduction Overview The instructions on this page describe how to run your first Visual Basic program (a \"hello world\" program) on the BrainPad. The steps are as follows: Start a new project . Manage the NuGet packages . Add the BrainPad helper code . Add the sample program . Deploy the program Before you start You should have already installed Visual Studio on your computer as well as the TinyCLR extension. If not, please start with System Setup for instructions on how to do so. Also, you need a BrainPad and a micro USB cable to continue. Plug the BrainPad into the USB port of your computer. The red power (PWR) light on the BrainPad should be on. Hello World The first step is to write some very simple code to see if the BrainPad will respond when we try to program it. This is usually called a \"hello world\" program. Start a New Project Open Visual Studio. In the File menu select New and then Project to open the New Project dialog box. In the left panel of the New Project window (see below) you can click on the small triangles to the left of each heading to expand the heading and show the options beneath it. You should see the Visual Basic language listed under the Installed heading in the left panel of the New Project window. Under Visual Basic select the TinyCLR option. In the center panel of the New Project window select TinyCLR Application . At the bottom of the New Project window you can change the name and location of your application or just stick with the default. When starting out you may wish to click on the Browse button and select the folder Desktop (in the left panel) to make your application easier to find. Click the OK button on the bottom right of the New Project window. This will create a new blank project. Once created, you'll be presented with a Module1.vb tab. Manage the NuGet Packages Visual Basic source files are listed in the Solution Explorer window. If the Solution Explorer window is not visible, click on View > Solution Explorer to open it. The squiggly red lines under items in the Solution Explorer window indicate errors. In this case the errors are caused by missing Nuget packages. Let's tell Visual Studio to include the Nuget packages and fix that now. If you right click on the project name in the Solution Explorer window a drop down menu will appear. Select Manage NuGet Packages... from the menu. Now you should see the installed TinyCLR NuGet library (GHIElectronics.TinyCLR.Core). We need to install a couple more libraries for our program to run. Click on Browse . From the drop down list next to Package source: select \"offline\" (if it is not the current package source). You should see a list of available Nuget packages in your local feed. Click on the GHIElectronics.TinyCLR.BrainPad package and then click on the Install button. Installing the BrainPad Nuget package will automatically install the GHIElectronics.TinyCLR.Devices and GHIElectronics.TinyCLR.Pins packages as well. Click on OK . Now accept the license agreement to install the packages. Close the NuGet... tab to get back to your BrainPad1.vb window. The red squiggles should now be gone. Add the BrainPad Helper Code The BrainPad Helper code provides needed definitions for some BrainPad objects. To add this file to your program, select Add New Item... in the Project menu. Then in the Add New Item dialog box click on BrainPad Helper and then click on the Add button. You will see a tab labeled BrainPad1.vb with contents as shown below. Add the Sample Program In the Module1.vb tab we will enter short sample program (our \"Hello World\" code). Cut and paste the following code into the Module1.vb window. Imports GHIElectronics.TinyCLR.BrainPad Module Module1 Public Sub Main() BrainPad.Display.DrawText(0, 0, \"Hello!\") BrainPad.Display.RefreshScreen() While True BrainPad.LightBulb.TurnWhite() BrainPad.Wait.Seconds(1) BrainPad.LightBulb.TurnOff() BrainPad.Wait.Seconds(1) End While End Sub End Module Your Module1.vb window should look like this: Deploy the Program Make sure your BrainPad is plugged into the computer's USB port. Now hit the start button as shown in the above image (or hit the F5 key). If you've done everything correctly the program will compile and deploy to your device. The message \"Hello World!\" should appear on the BrainPad display, and the light bulb should start blinking. Congratulations! You're on your way to learning advanced programming on the BrainPad! What happened exactly? Our application began by running the BrainPad.Display.DrawText(0, 0, \"Hello!\") and BrainPad.Display.RefreshScreen() lines to instruct the display to show the text \"Hello!\" The line BrainPad.Display.DrawText(0, 0, \"Hello!\") is known as a function call. The name of the function is \"DrawText().\" This function is part of the \"Display\" object, which is part of the \"BrainPad\" object. The items listed in parenthesis (0, 0, \"Hello!\") are called the arguments of the function. In this case the first zero tells the BrainPad to display the text at the left side of the BrainPad display. If this number is increased the text will appear farther to the right on the screen. The second zero tells the BrainPad to print the text at the top of the display. If this number is increased the text will be printed lower on the screen. The third arugument, \"Hello!,\" tells the BrainPad what text to display on the screen. After display lines are finished, the While True loop starts running. Code placed inside this while loop is executed in an infinite loop. This is why the LED keeps blinking and never stops."
  },
  "resources/bootloader.html": {
    "href": "resources/bootloader.html",
    "title": "Bootloader",
    "keywords": "Bootloader The BrainPad bootloader is small program that allows the BrainPad to communicate with your computer. It comes preinstalled on the BrainPad and you should not have to install it yourself unless you are an advanced programmer using advanced programming techniques. In the rare case that you need to load the bootloader, follow these 2 steps: Download the desired bootloader DFU file from the Downloads page. If you are not sure which version you need, use the latest version. Follow the instructions for loading DFU files ."
  },
  "resources/older-brainpad.html": {
    "href": "resources/older-brainpad.html",
    "title": "Older BrainPads",
    "keywords": "Older BrainPads Some early adopters have original concept and prototype BrainPads. We appreciate your support and want to thank you for helping make the BrainPad the best path for STEM education. We highly recommend switching to the production BrainPad. If you are still using an older BrainPad this page will explain the differences. Pre-production BrainPad This version has \"BP2 Rev A\" printed in the lower left corner. This version is identical to the production BrainPad except for a different reset circuit. The pre-production BrainPad as a smaller reset button. Pressing and holding the reset button on the production BrainPad will put it in loader mode. To do the same on the pre-production board (with the smaller reset button), press and hold the left button, press and release the reset button, wait a second, and release the left button. In other words, whenever you are instructed to press and hold reset for three seconds, you will follow the instructions above instead. In all other respects this BrainPad is the same as the production BrainPad. Concept BrainPad This BrainPad was much larger. You can identify it by the Traffic Light in the top right Corner. This version uses the G30 chipset. Unfortunately, this version only works with TinyCLR OS. It does not work with Microsoft MakeCode or any other software. We try to keep the the latest TinyCLR OS BrainPad libraries compatible and workable with this board but we recommend switching to the production BrainPad. To use with TinyCLR OS, follow the instructions on the GHI Electronics G30 support page . From there you can use all C# and VB examples as is or with minor changes. Other Concepts and Prototypes There were some other concept and prototype BrainPads as well. Those BrainPads are very rare and will no longer be supported. You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "README.html": {
    "href": "README.html",
    "title": "Docs",
    "keywords": "Docs This is the repository for our BrainPad docs. To generate the docs locally: Clone/Fork the repo Open the command prompt in the documents' root folder (\"Run as Administrator\" may be necessary) Execute docfx --serve"
  },
  "get-inspiderd/intro.html": {
    "href": "get-inspiderd/intro.html",
    "title": "Introduction",
    "keywords": "Introduction One of the things that makes the BrainPad so special is it's expandability and the broad range of possibilities. STEM Requires a path, not a toy, that eveloves with you, from a beginner to any level you want to be at. That is what the BrainPad does, for every age and every background. Electronics SnapCircuits Wire Circuits (not sure of the name) Breakout Boards ebay and such Games Space Fighters Pong AI Artificial Intelegence is a very advanced topic normally but you can learn it easilly the BrainPad. Screen Tick-Tac-Toe Live Tick-Tac-Tooe Robotics Adobt-a-Bot This is one of our very popular events, a \"pet\" adotion event, but your pet is a robot! IoT (IoT) The internet of Things."
  },
  "go-beyond/system-setup.html": {
    "href": "go-beyond/system-setup.html",
    "title": "System Setup",
    "keywords": "System Setup TinyCLR OS is the tiny operating system used by the BrainPad to run your C# and Visual Basic programs. Microsoft Visual Studio is used to write these programs on your computer and is also used by professional programmers the world over. Both TinyCLR and Visual Studio are available for free, but must be set up before using them to program the BrainPad to start having fun. Tip You can learn more about TinyCLR OS on the GHI Electronics website System Setup Overview The instructions on this page describe how to setup your computer to start programming the BrainPad using Visual Studio. The steps are as follows: Step 1: Setup Your Computer Install Visual Studio . Install the TinyCLR Project System . Install the TinyCLR NuGet packages . Step 2: Setup Your Brainpad Install the BrainPad firmware . Step 1: Setup Your Computer Install Visual Studio The Visual Studio Community Edition is free and can be found here: Microsoft Visual Studio 2017 Community Edition. Click on the above link an then click on the Download VS Community 2017 button. After downloading is complete, open or run the file. If you are asked, allow the program to make changes to your device. When the installation program shows the Workloads screen, select .NET desktop development (you should see a check mark in the .NET desktop development box) and then click the Install button. After installation is complete, click on the Launch button. You will be asked to sign in or sign up for Visual Studio developer services. You can either sign in (or sign up) now or click the 'Not now, maybe later' option. You will then be asked to pick a color scheme and Visual Studio will start. Install the TinyCLR Project System If Visual Studio is open, close it before continuing with the TinyCLR installation. Download the TinyCLR Visual Studio Project System from our Downloads page. After the download is complete, open or run the downloaded file. In the VSIX Installer dialog box click the Install button. Install the TinyCLR Nuget Packages Since TinyCLR OS is still so new, we haven't yet uploaded any packages to NuGet. Click here and download the latest Nuget library. Open or run the downloaded file. A window will pop up with a list of the files in the library. Click on the Extract all button. A dialog box will appear allowing you to select a folder to save the files. You can change the folder location or accept the default location. You will need to remember the folder location for step 11. Click on the Extract button to extract and save the files. If a window with the files appears, you can close it before continuing. Start Visual Studio. From the Tools menu select NuGet Package Manager and then select Package Manager Settings . In the left panel under Nuget Package Manager select Package Sources . Click on the button with the green plus sign near the upper right corner of the Options dialog box. A new package source will be created in the Available package sources box. Change the name of the package source from \"package source\" to \"offline.\" You may have to click on the package source (in the available package sources box) before you can change the name. Now change the folder name in the text box to the right of Source: to the folder where you saved the NuGet packages in step 5. You can either type in the folder name or click on the ... button to search for the folder. Click on the Update button. The folder name should now appear under the offline entry under Available package sources . Click the OK button. Step 2: Setup Your BrainPad Tip If you have an older concept or prototype BrainPad the setup is slightly different. See the Older BrainPads page for more details. Install the BrainPad Firmware To prepare the BrainPad you only need to install the latest firmware as described below. Download the latest TinyCLR OS firmware for the BrainPad from Downloads . Select Show in folder or Save and Open folder (depending on your browser). Connect the BrainPad to your computer using a micro USB cable. The power (PWR) light on the BrainPad should be on. Press and hold the RESET button on the BrainPad for at least three seconds until the Light Bulb on the BrainPad lights up green. A window will open named BrainPad2 . Copy or drag the firmware file from the folder in step 2 into this window. The Light Bulb on the BrainPad will flicker and a progress gauge will appear on the computer screen. It only takes a few seconds for the firmware to be copied to the BrainPad. When it is done, the green light on the BrainPad will stop flickering and the BrainPad2 window will close. Congratulations! Your BrainPad is now running the latest firmware! Note The BrainPad comes with a \"bootloader\" pre-installed. You shouldn't have to reinstall it unless you are an advanced user using advanced programming techniques. Check out our bootloader page to find out more. Going Beyond! Congratulations! You are now ready to start programming like a professional. You have the option of using the C# programming language or the Visual Basic programming language. If you are not sure which one to pick, C# is used more often in the professional world and is recommended for those serious about learning programming. Visual Basic is easier to use -- especially for beginners. We use C# for our own software development, but we usually start with Visual Basic for those who are new to programming. You are not locked in to one language -- you can freely switch between C# and Visual Basic. To give you a better idea, here is code that counts from 1 to 10 on the BrainPad display in C#: namespace Counter { class Program { public void Main() { for (int count = 1; count < 11; count++) { BrainPad.Display.DrawNumber(0, 0, count); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Seconds(1); } } } } And here is the equivalent code in Visual Basic: Class Program Public Sub Main() For count = 1 To 10 BrainPad.Display.DrawNumber(0, 0, count) BrainPad.Display.RefreshScreen() BrainPad.Wait.Seconds(1) Next count End Sub End Class Click on a link below to get started: C# Introducton Visual Basic Introduction You are on the documentation website for the BrainPad. The main website is found at www.brainpad.com"
  },
  "go-beyond/components/buttons.html": {
    "href": "go-beyond/components/buttons.html",
    "title": "Buttons",
    "keywords": "Buttons The four directional buttons (up, down, left and right) are used as inputs and can be read by your program to determine if the button is being pressed or not. They can be checked in two different ways. One way is to just check once to see if the button is being pressed. This works well, but it is possible to miss a button press if your program doesn't check often enough. Sometimes this is not a problem, but for some programs it may be an issue. The other way of checking buttons is to use an event handler. An event handler will continuously check to see if a button has been pressed or released. A button is released when the person pushing the button stops pushing (or releases) the button. Once an event handler is set up, the BrainPad will start an event listener that will check the button for you. This allows your program to do other tasks without you worrying about missing a button event. Once the button is pushed (or released) the event listener will call your event handler. The event handler is code you write to tell the BrainPad how to react when a button is pushed (or released). While an event handler is a little harder to set up, it allows the program to take care of other tasks while never missing a button event. Button Methods BrainPad.Buttons.IsUpPressed() - returns a boolean true if the up button is pressed and a boolean false otherwise. BrainPad.Buttons.IsLeftPressed() - returns a boolean true if the left button is pressed and a boolean false otherwise. BrainPad.Buttons.IsRightPressed() - returns a boolean true if the right button is pressed and a boolean false otherwise. BrainPad.Buttons.IsDownPressed() - returns a boolean true if the down button is pressed and a boolean false otherwise. ButtonEventHandler WhenUpButtonPressed ButtonEventHandler WhenUpButtonReleased ButtonEventHandler WhenLeftButtonPressed ButtonEventHandler WhenLeftButtonReleased ButtonEventHandler WhenRightButtonPressed ButtonEventHandler WhenRightButtonReleased ButtonEventHandler WhenDownButtonPressed ButtonEventHandler WhenDownButtonReleased Tip When entering event listener code, hitting the Tab key after the += (see sample below) will automatically complete the line of code and generate a basic event handler routine. Button Sample Code The following program uses both polling and an event handler to check the up and down buttons. When the up button is pressed the light bulb will turn blue, and when the down button is pressed the light bulb will turn off. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { BrainPad.Buttons.WhenDownButtonPressed += Buttons_WhenDownButtonPressed; while (true) { if (BrainPad.Buttons.IsUpPressed()) BrainPad.LightBulb.TurnBlue(); BrainPad.Wait.Minimum(); } } private static void Buttons_WhenDownButtonPressed() { BrainPad.LightBulb.TurnOff(); }"
  },
  "go-beyond/components/intro.html": {
    "href": "go-beyond/components/intro.html",
    "title": "Components",
    "keywords": "Components This section provides descriptions of the various BrainPad components and a list of the methods used to interact with each component. Each of these components acts as either an input device or an output device. Input and output are defined by whether the information for the component goes into, or comes out of, the \"brain.\" The \"brain\" is the processor chip or microcontroller in the center of the BrainPad. If information flows into the processor it is considered an input device. For example, the temperature sensor is read by the processor when your program wants to know the temperature. The temperature sensor is an input device -- the temperature information moves from the sensor into the processor. The buzzer is an output device. When you program the BrainPad to produce sound, the sound information is output from the processor to the buzzer. In humans, ears are input devices, and the mouth is an output device. Together they allow us to communicate. Just like the BrainPad, your brain gets input from your ears, processes it and figures out what to say, and then sends output to your mouth and vocal cords to generate speech. The BrainPad has all of its inputs arranged on the left side of the board: Accelerometer Buttons Light Sensor Temperature Sensor All of the output devices are on the right side of the BrainPad: Buzzer Display Light Bulb Servo Motors So the flow of information on the BrainPad goes from left to right. Inputs come in from the sensors on the left side of the BrainPad, are processed by the \"brain,\" and then sent to the output devices on the right side of the board. Note that most devices are not set up this way -- we did this to make the BrainPad more intuitive."
  },
  "go-beyond/components/temperature-sensor.html": {
    "href": "go-beyond/components/temperature-sensor.html",
    "title": "Temperature Sensor",
    "keywords": "Temperature Sensor The BrainPad temperature sensor is basically a digital thermometer. There are seperate commands for reading the temperature in Celsius and Fahrenheit. Temperature Sensor Methods BrainPad.TemperatureSensor.ReadTemperatureInCelsius() - Returns the temperature in Celsius from the BrainPad's sensor. Returns the temperature as type double. BrainPad.TemperatureSensor.ReadTemperatureInFahrenheit() - Returns the temperature in Fahrenheit from the BrainPad's sensor. Returns the temperature as type double. Temperature Sensor Sample Code The following program displays the temperature in Fahrenheit on the BrainPad screen. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { while (true) { BrainPad.Display.DrawSmallText(30, 12, \"Temperature\"); BrainPad.Display.DrawNumber(35, 24, BrainPad.TemperatureSensor.ReadTemperatureInFahrenheit()); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } }"
  },
  "go-beyond/other-software/arduino.html": {
    "href": "go-beyond/other-software/arduino.html",
    "title": "Arduino",
    "keywords": "Arduino Using Arduino with the BrainPad Arduino is simplified multi-platform IDE/C++ combo, with a community STM32 options. This video shows the use of Arduino with the BrainPad. Arduino Website Arduino STM32 Github DFU Files Forum discussion about getting BrainPad display to work using Arduino"
  },
  "go-beyond/projects/electronic-dice.html": {
    "href": "go-beyond/projects/electronic-dice.html",
    "title": "Electronic Dice",
    "keywords": "Electronic Dice You do not need a real dice. BrainPad Electronic Dice is a more fun, plus you can cheat by changing the program! Difficulty: Easy Objective: Math How It Works A simple box is drawn to show the shape of a die. Then, we go in a loop generating random numbers and showing them as a die on the display. Our loop has a an increasing delay giving a cool effect. The Code Tip Make sure the namespace in your program matches your project's namespace. Your project's namespace can be found in the BrainPad Helper file by clicking on the BrainPad1.cs tab. More Info . using System; using GHIElectronics.TinyCLR.BrainPad; namespace ModifyThis { class Program { const int DICE_BASE_X = 55; const int DICE_BASE_Y = 10; static void Main() { var Rnd = new Random(); while (true) { BrainPad.Display.DrawSmallText(10, 55, \"Shake or Up to roll\"); BrainPad.Display.DrawRectangle(DICE_BASE_X - 5, DICE_BASE_Y - 5, 31, 31); for (var i = 0; i < 100; i += 5) { ShowDice(Rnd.Next(6) + 1); BrainPad.Buzzer.Beep(); BrainPad.Wait.Milliseconds(i); BrainPad.Display.RefreshScreen(); } while (BrainPad.Accelerometer.ReadX() < 1 && BrainPad.Buttons.IsUpPressed() == false) BrainPad.Wait.Minimum(); BrainPad.Wait.Minimum(); } } static void ShowDice(int num) { BrainPad.Display.ClearPartOfScreen(DICE_BASE_X + 3, DICE_BASE_Y + 3, 16, 16); switch (num) { case 1: BrainPad.Display.DrawCircle(DICE_BASE_X + 10, DICE_BASE_Y + 10, 2); break; case 2: BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 15, 2); break; case 3: BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 10, DICE_BASE_Y + 10, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 15, 2); break; case 4: BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 15, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 15, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 5, 2); break; case 5: BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 15, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 15, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 10, DICE_BASE_Y + 10, 2); break; case 6: BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 10, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 5, DICE_BASE_Y + 15, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 5, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 10, 2); BrainPad.Display.DrawCircle(DICE_BASE_X + 15, DICE_BASE_Y + 15, 2); break; } } } }"
  }
}