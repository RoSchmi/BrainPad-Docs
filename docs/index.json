{
  "index.html": {
    "href": "index.html",
    "title": "The BrainPad Documentation",
    "keywords": "The BrainPad Documentation You are on the documentation sub-website for the BrainPad. The main website is found at www.brainpad.com BrainPad Arcade BrainPad Classic"
  },
  "go-beyond/components/other-components.html": {
    "href": "go-beyond/components/other-components.html",
    "title": "Other Components",
    "keywords": "Other Components The \"Brain\" The \"brain\" or processor is the most important part of the BrainPad. The processor is the black square, or \"chip\", in the center of the BrainPad between the input and output components. This processor is a single chip computer which is known in the engineering world as a microcontroller. This microcontroller stores the instructions, or code, that you write and follows those instructions exactly as written. The processor also reads information from the input devices and follows your instructions to process that information. The processor will then send information and/or instructions to the output devices exactly as it is told by your program. The program, code, and instructions are all the same thing, and the microcontroller is worthless without them. Just like any computer, without a program to run a microcontroller will do nothing. Microcontrollers are built into many electronic devices. A typical car has dozens of microcontrollers, while high-end luxury vehicles often have more than a hundred. As microcontrollers are both versatile and inexpensive, they are now used in most household electronic devices including thermostats, washing machines, microwave ovens, air conditioners, and refrigerators. Microcontrollers have memory that stores the programs you write, a central processing unit (CPU) that does math and executes program instructions, and their own built-in input and output devices. Because microcontroller use is widespread and all microcontrollers need to be programmed, the ability to code has never been more useful. If you're interested in finding out more information about the processor on the BrainPad, the following links will take you to the (highly technical) documentation for the BrainPad's \"brain.\" Don't worry if these documents are difficult or impossible to understand. If microcontrollers are something you are interested in, you will be surprised how much you will learn over time. STM32F401xE Data Sheet STM32F401xD/E Reference Manual Expansion Headers The expansion headers are one reason the BrainPad is so special. They are MikroBUS compatible which means the BrainPad can be used with literally hundreds of available expansion modules. In addition, you can also make your own custom circuits to control or get data from external devices by simply plugging wires into the expansion header connectors. You can also build your own circuits using solderless breadboards, or use prototyping boards to make your own expansion boards. USB Port The USB port is used to power the BrainPad and to connect the BrainPad to your computer. The programs you write are sent to the BrainPad through the USB port. Information can be sent from the BrainPad back to the computer to help you debug or fix your programs. The BrainPad uses a standard micro USB connector which has become commonplace do to its use in smartphones. The BrainPad is also compatible with inexpensive rechargeable USB battery packs (also known as power banks) that are used to charge phones, making it easy to take the BrainPad anywhere!"
  },
  "resources/downloads.html": {
    "href": "resources/downloads.html",
    "title": "Downloads",
    "keywords": "Downloads TinyCLR OS BrainPad Firmware This tiny operating system can be loaded onto the BrainPad to enable it to work with Visual Studio. File Date MD5 v1.0.0 2018-12-27 121F8824EEFA6AC3CFD5D9CD13A057D1 Bootloader This is the bootloader for the BrainPad. You only need it if you are an advanced user and you accidently wiped or corrupted your device. File Date MD5 v1.0.2 2018-04-05 4285FFAD09CF4C4C1B3C676FBC53807A"
  },
  "go-beyond/components/light-bulb.html": {
    "href": "go-beyond/components/light-bulb.html",
    "title": "Light Bulb",
    "keywords": "Light Bulb The BrainPad Light Bulb actually contains three light emitting diodes (LEDs) in one package. One LED is red, one is green, and one is blue. These can independently set to varying intensities to create up to a million different colors. Light Bulb Methods BrainPad.LightBulb.TurnColor(double r, double g, double b) - Used to create a variety of colors by controlling the brightness of the red, green and blue LEDs. The minimum color intensity is 0 (off) and the maximum is 100. BrainPad.LightBulb.TurnRed() - Turns the light bulb red at full intensity. BrainPad.LightBulb.TurnBlue() - Turns the light bulb blue at full intensity. BrainPad.LightBulb.TurnGreen() - Turns the light bulb green at full intensity. BrainPad.LightBulb.TurnWhite() - Turns the light bulb white at full intensity. BrainPad.LightBulb.TurnOff() - Turns off the light bulb. Same as BrainPad.LightBulb.TurnColor(0.0, 0.0, 0.0) Light Bulb Sample Code The following program turns the light bulb red, blue, green and then a custom color. It changes color every second and repeats forever. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { while (true) { BrainPad.LightBulb.TurnRed(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnBlue(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnGreen(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnColor(5, 25, 100); BrainPad.Wait.Seconds(1); } }"
  },
  "go-beyond/components/display.html": {
    "href": "go-beyond/components/display.html",
    "title": "Display",
    "keywords": "Display The BrainPad display is an output device. The BrainPad has commands allowing you to display numbers and text and draw simple pictures and shapes. These shapes including points, lines, circles and rectangles. All display commands use pixels (screen dots) as units. Display commands in this section only change the memory buffer of the display and are not seen until you also call the BrainPad.Display.RefreshScreen() method. Display Methods BrainPad.Display.Height() - returns the BrainPad display's height in pixels (64). BrainPad.Display.Width() - returns the BrainPad display's width in pixels (128). BrainPad.Display.DrawSmallNumber(int x, int y, long number) - Displays a number of type long in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallNumber(10, 20, 52) ] BrainPad.Display.DrawSmallNumber(int x, int y, double number) - Displays a number of type double in small text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, long number) - Displays a number of type long in large text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, double number) - Displays a number of type double in large text at the given x and y coordinates. BrainPad.Display.DrawSmallText(int x, int y, string text) - Displays a string in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallText(20, 20, \"Hello\") ] BrainPad.Display.DrawText(int x, int y, string text) - Displays a string in small text at the given x and y coordinates. BrainPad.Display.DrawScaledText(int x, int y, string text, int HScale, int VScale) - Displays text that can be made larger. Text size is multiplied by HScale to determing horizontal size and VScale to determine vertical size. For example setting HScale to two will print text that is twice as wide. BrainPad.Display.CreatePicture(int width, int height, byte[] data) - Used to store a picture for the DrawPicture commands. BrainPad.Display.CreateScaledPicture(int width, int height, byte[] data, int scale) - Used to store a picture that will be displayed larger by a factor of scale. For example setting scale to two will display the picture at twice its original size. BrainPad.Display.DrawCircle(int x, int y, int r) - Draws a circle of radius r with the center located at the given x and y coordinates. BrainPad.Display.DrawRectangle(int x, int y, int width, int height) - Draws a box at the given x and y coordinates. BrainPad.Display.DrawFilledRectangle(int x, int y, int width, int height) - Draws a filled box at the given x and y coordinates. BrainPad.Display.DrawLine(int x0, int y0, int x1, int y1) - Draws a line from (x0, y0) to (x1, y1). BrainPad.Display.DrawPoint(int x, int y) - Turns on a single pixel at the given x and y coordinates. BrainPad.Display.DrawPicture(int x, int y, Picture picture) - Draws the given picture at the given x and y coordinates. BrainPad.Display.DrawPictureFlippedHorizontally(int x, int y, Picture picture) - Flips the given picture horizontally and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureFlippedVertically(int x, int y, Picture picture) - Flips the given picture vertically and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureRotated180Degrees(int x, int y, Picture picture) - Rotates the given picture 180 degrees and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureRotated270Degrees(int x, int y, Picture picture) - Rotates the given picture 270 degrees clockwise and draws it at the given x and y coordinates. BrainPad.Display.DrawPictureRotated90Degrees(int x, int y, Picture picture) - Rotates the given picture 90 degrees clockwise and draws it at the given x and y coordinates. BrainPad.Display.ClearPartOfScreen(int x, int y, int width, int height) - Clears a rectangular section of the display where x and y are the top left corner of a rectangle of given width and height. BrainPad.Display.ClearPoint(int x, int y) - Clears the pixel located at the given x and y coordinates. BrainPad.Display.ClearScreen() - Clears the entire screen buffer. BrainPad.Display.InvertColors(bool invert) - Inverts each pixel on the entire screen. Pixels that are on will be turned off, and pixels that are off will be turned on. BrainPad.Display.RefreshScreen() - Writes the entire display buffer to the display. Used to show what has been drawn to the screen buffer on the display. Display Sample Code The following program draws a point, line, rectangle, circle and a picture of a heart in two sizes. To try it, start a C# new project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { BrainPad.Display.DrawPoint(64, 32); BrainPad.Display.DrawLine(0, 52, 127, 52); BrainPad.Display.DrawRectangle(48, 20, 32, 24); BrainPad.Display.DrawCircle(64, 32, 20); byte[] pictureData = new byte[] { 0, 0, 1, 0, 0 ,0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, }; BrainPad.Display.DrawPicture(0, 0, BrainPad.Display.CreatePicture(9, 9, pictureData)); BrainPad.Display.DrawPicture(10, 10, BrainPad.Display.CreateScaledPicture(9, 9, pictureData, 2)); BrainPad.Display.RefreshScreen(); }"
  },
  "README.html": {
    "href": "README.html",
    "title": "Docs",
    "keywords": "Docs This is the repository for our BrainPad docs. To generate the docs locally: Clone/Fork the repo Open the command prompt in the documents' root folder (\"Run as Administrator\" may be necessary) Execute docfx --serve After executing the above command, a temporary webpage will appear to allow you to view the files in your browser fully rendered in HTML, for example http://localhost:8080 . To install DocFX, please review and download from the following site: https://dotnet.github.io/docfx/ . From there, you can go to the Getting Started page for instructions on how to install and you can go to Download Latest to download the most up to date DocFX files. Please note, you will not need to use the docfx init command as the initial JSON file is already present in our repository. WK<html>TOpdf is required as part of the build process. You will find the needed files at the following address: https://wkhtmltopdf.org/downloads.html . Once downloaded, execute the command to install. Once installed, add the path to the installed binary to the environment variable PATH, for example \"C:\\Program Files\\wkhtmltopdf\\bin\"."
  },
  "go-beyond/csharp/intro.html": {
    "href": "go-beyond/csharp/intro.html",
    "title": "Introduction to C# (C sharp)",
    "keywords": "Introduction to C# (C sharp) It is not a secret that C and C++ are the most popular programming languages among professionals. This is particularly true for programmers that work with small digital systems. C# is the modern cousin of the C and C++ family. Its syntax is very close to JAVA, another very popular programming language. C# Introduction Overview The instructions on this page describe how to run your first C# program (a \"hello world\" program) on the BrainPad. The steps are as follows: Start a new project . Manage the NuGet packages . Add the BrainPad helper code . Add the sample program . Deploy the program Before you start You should have already installed Visual Studio on your computer as well as the TinyCLR extension. If not, please start with System Setup for instructions on how to do so. Also, you need a BrainPad and a micro USB cable to continue. Plug the BrainPad into the USB port of your computer. The red power (PWR) light on the BrainPad should be on. Hello World The first step is to write some very simple code to see if your BrainPad will respond when we try to program it. This is usually called a \"hello world\" program. Start a New Project Open Visual Studio. In the File menu select New and then Project to open the New Project dialog box. In the left panel of the New Project window (see below) you can click on the small triangles to the left of each heading to expand the heading and show the options beneath it. You should see the Visual C# language listed under the Installed heading in the left panel of the New Project window. Under Visual C# select the TinyCLR option. In the center panel of the New Project window select TinyCLR Application . At the bottom of the New Project window you can change the name and location of your application. Change the name to \"BrainPadDemo.\" You may wish to click on the Browse button and select the folder Desktop (in the left panel) to make your application easier to find. Click the OK button on the bottom right of the New Project window. This will create a new blank project. Once created, you'll be presented with a Program.cs tab. Manage the NuGet Packages Code packages to handle specific tasks are built into libraries. These libraries are found on a cloud service, called NuGet. This is where you will find drivers for many things, including the sensors found on the BrainPad. Source files are listed in the Solution Explorer window. If the Solution Explorer window is not visible, click on View > Solution Explorer to open it. If you right click on the project name in the Solution Explorer window a drop down menu will appear. Select Manage NuGet Packages... from the menu. Now you should see the installed TinyCLR NuGet library (GHIElectronics.TinyCLR.Core). We need to install a couple more libraries for our program to run. Click on the Browse tab. Make sure the package source is set to Package source or All . In the search box type \"tinyclr\" and make sure the Include prerelease box is checked. You should see a list of available TinyCLR Nuget packages similar to the image below. Tip There maybe different version of the same library. You need to select a version that matches the BrainPad firmware version you loaded at System Setup . Find and click on the GHIElectronics.TinyCLR.BrainPad package and then click on the Install button. Installing the BrainPad Nuget package will automatically install other packages as well. Click on OK . Now accept the license agreement to install the packages. Close the NuGet... tab to get back to your Program.cs window. Add the BrainPad Helper Code The BrainPad Helper code provides needed definitions for some BrainPad objects. To add this file to your program, select Add New Item... in the Project menu. Then in the Add New Item dialog box click on BrainPad Helper and then click on the Add button. You will see a tab labeled BrainPad1.cs with contents as shown below. Add the Sample Program In the Program.cs tab we will enter short sample program (our \"Hello World\" code). Cut and paste the following code into the Program.cs window. namespace BrainPadDemo { class Program { static void Main() { BrainPad.Display.DrawText(0, 0, \"Hello!\"); BrainPad.Display.RefreshScreen(); while (true) { BrainPad.LightBulb.TurnWhite(); BrainPad.Wait.Seconds(1); BrainPad.LightBulb.TurnOff(); BrainPad.Wait.Seconds(1); } } } } Your Program.cs window should look like this: A few words about namespaces When you create a new C# project, a default namespace is automatically created for you. If you cut and paste code into your project you have to keep the original namespace for the project to work. You can view the project's namespace in the BrainPad Helper file as shown below. Namespace shown in BrainPad helper file: Namespace shown in program file. This must match the namespace in the BrainPad Helper file: If you did not name your project \"BrainPadDemo\" when you created it, you will have a namespace mismatch when you paste the above sample program into your project. Just change the namespace in the Program.cs window to match the namespace in the BrainPad Helper file and you should be good to go. Another option is to add a using statement at the top of the program file that references the namespace in the BrainPad helper file. If you created a project named \"BrainPadDemo\" and paste in code with a different namespace, you can add the line using BrainPadDemo; at the top of the pasted code to fix the namespace mismatch. The name following using must match the namespace in the BrainPad Helper file. Deploy the Program Make sure your BrainPad is plugged into the computer's USB port. Now hit the start button as shown in the above image (or hit the F5 key). If you've done everything correctly the program will compile and deploy to your device. The message \"Hello World!\" should appear on the BrainPad display, and the light bulb should start blinking. Congratulations! You're on your way to learning advanced programming on the BrainPad! What happened exactly? Our application began by running the BrainPad.Display.DrawText(0, 0, \"Hello!\") and BrainPad.Display.RefreshScreen() lines to instruct the display to show the text \"Hello!\" The line BrainPad.Display.DrawText(0, 0, \"Hello!\") is known as a function call. The name of the function is \"DrawText().\" This function is part of the \"Display\" object, which is part of the \"BrainPad\" object. The items listed in parenthesis (0, 0, \"Hello!\") are called the arguments of the function. In this case the first zero tells the BrainPad to display the text at the left side of the BrainPad display. If this number is increased the text will appear farther to the right on the screen. The second zero tells the BrainPad to print the text at the top of the display. If this number is increased the text will be printed lower on the screen. The third arugument, \"Hello!,\" tells the BrainPad what text to display on the screen. After the display lines are finished, the While True loop starts running. Code placed inside this while loop is executed in an infinite loop. This is why the LED keeps blinking and never stops."
  },
  "go-beyond/components/intro.html": {
    "href": "go-beyond/components/intro.html",
    "title": "Components",
    "keywords": "Components This section provides descriptions of the various BrainPad components and a list of the methods used to interact with each component. Each of these components acts as either an input device or an output device. Input and output are defined by whether the information for the component goes into, or comes out of, the \"brain.\" The \"brain\" is the processor chip or microcontroller in the center of the BrainPad. If information flows into the processor it is considered an input device. For example, the temperature sensor is read by the processor when your program wants to know the temperature. The temperature sensor is an input device -- the temperature information moves from the sensor into the processor. The buzzer is an output device. When you program the BrainPad to produce sound, the sound information is output from the processor to the buzzer. In humans, ears are input devices, and the mouth is an output device. Together they allow us to communicate. Just like the BrainPad, your brain gets input from your ears, processes it and figures out what to say, and then sends output to your mouth and vocal cords to generate speech. The BrainPad has all of its inputs arranged on the left side of the board: Accelerometer Buttons Light Sensor Temperature Sensor All of the output devices are on the right side of the BrainPad: Buzzer Display Light Bulb Servo Motors So the flow of information on the BrainPad goes from left to right. Inputs come in from the sensors on the left side of the BrainPad, are processed by the \"brain,\" and then sent to the output devices on the right side of the board. Note that most devices are not set up this way -- we did this to make the BrainPad more intuitive. There are a few other components of the BrainPad which don't quite fit into the input or output category. Information about the brain (processor), expansion headers, and USB port can be found here"
  },
  "go-beyond/components/buttons.html": {
    "href": "go-beyond/components/buttons.html",
    "title": "Buttons",
    "keywords": "Buttons The four directional buttons (up, down, left and right) are used as inputs and can be read by your program to determine if the button is being pressed or not. They can be checked in two different ways. One way is to just check once to see if the button is being pressed. This works well, but it is possible to miss a button press if your program doesn't check often enough. Sometimes this is not a problem, but for some programs it may be an issue. The other way of checking buttons is to use an event handler. An event handler will continuously check to see if a button has been pressed or released. A button is released when the person pushing the button stops pushing (or releases) the button. Once an event handler is set up, the BrainPad will start an event listener that will check the button for you. This allows your program to do other tasks without you worrying about missing a button event. Once the button is pushed (or released) the event listener will call your event handler. The event handler is code you write to tell the BrainPad how to react when a button is pushed (or released). While an event handler is a little harder to set up, it allows the program to take care of other tasks while never missing a button event. Button Methods BrainPad.Buttons.IsUpPressed() - returns a boolean true if the up button is pressed and a boolean false otherwise. BrainPad.Buttons.IsLeftPressed() - returns a boolean true if the left button is pressed and a boolean false otherwise. BrainPad.Buttons.IsRightPressed() - returns a boolean true if the right button is pressed and a boolean false otherwise. BrainPad.Buttons.IsDownPressed() - returns a boolean true if the down button is pressed and a boolean false otherwise. ButtonEventHandler WhenUpButtonPressed ButtonEventHandler WhenUpButtonReleased ButtonEventHandler WhenLeftButtonPressed ButtonEventHandler WhenLeftButtonReleased ButtonEventHandler WhenRightButtonPressed ButtonEventHandler WhenRightButtonReleased ButtonEventHandler WhenDownButtonPressed ButtonEventHandler WhenDownButtonReleased Tip When entering event listener code, hitting the Tab key after the += (see sample below) will automatically complete the line of code and generate a basic event handler routine. Button Sample Code The following program uses both polling and an event handler to check the up and down buttons. When the up button is pressed the light bulb will turn blue, and when the down button is pressed the light bulb will turn off. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { BrainPad.Buttons.WhenDownButtonPressed += Buttons_WhenDownButtonPressed; while (true) { if (BrainPad.Buttons.IsUpPressed()) BrainPad.LightBulb.TurnBlue(); BrainPad.Wait.Minimum(); } } private static void Buttons_WhenDownButtonPressed() { BrainPad.LightBulb.TurnOff(); }"
  },
  "go-beyond/components/temperature-sensor.html": {
    "href": "go-beyond/components/temperature-sensor.html",
    "title": "Temperature Sensor",
    "keywords": "Temperature Sensor The BrainPad temperature sensor is basically a digital thermometer. There are seperate commands for reading the temperature in Celsius and Fahrenheit. Temperature Sensor Methods BrainPad.TemperatureSensor.ReadTemperatureInCelsius() - Returns the temperature in Celsius from the BrainPad's sensor. Returns the temperature as type double. BrainPad.TemperatureSensor.ReadTemperatureInFahrenheit() - Returns the temperature in Fahrenheit from the BrainPad's sensor. Returns the temperature as type double. Temperature Sensor Sample Code The following program displays the temperature in Fahrenheit on the BrainPad screen. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { while (true) { BrainPad.Display.DrawSmallText(30, 12, \"Temperature\"); BrainPad.Display.DrawNumber(35, 24, BrainPad.TemperatureSensor.ReadTemperatureInFahrenheit()); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Minimum(); } }"
  },
  "go-beyond/components/light-sensor.html": {
    "href": "go-beyond/components/light-sensor.html",
    "title": "Light Sensor",
    "keywords": "Light Sensor The BrainPad Light Sensor is used to measure the amount of light hitting the sensor. Light Sensor Method BrainPad.LightSensor.ReadLightLevel() - Reads the amount of light hitting the light sensor and returns an integer corresponding to the brightness. The higher the returned value greater the intensity of the light. The output range is from 0 to 100. Light Sensor Sample Code This program acts as a simple night light. The lower the intensity of light hitting the sensor the brighter the light bulb gets. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { double lightLevel; while (true) { lightLevel = BrainPad.LightSensor.ReadLightLevel(); lightLevel = 100 - lightLevel; BrainPad.LightBulb.TurnColor(lightLevel, lightLevel, lightLevel); BrainPad.Wait.Minimum(); } }"
  },
  "go-beyond/other-software/intro.html": {
    "href": "go-beyond/other-software/intro.html",
    "title": "Other Software Options",
    "keywords": "Other Software Options The BrainPad focuses on Start Making (link) with Microsoft MakeCode and lets you Go Beyond (link) with TinyCLR OS and .NET. However, there are other software options that also work on the BrainPad. We only give you a starting point in case you want to test the other possibilities. Arduino If you are familiar with the Arduino programming environment you can use it to program the BrainPad in C++. We encourage students to learn Visual Studio as it is more widely used professionally, but Arduino has become a very common and widely accepted standard among students, hobbyists, and engineers. Click here to get started with Arduino on the BrainPad . MicroPython You can also program the BrainPad in MicroPython. The BrainPad is a great platform for those who know or wish to learn the Python programming language. The Python computer language emphasizes code readability and allows programmers to write programs using fewer lines of code than most other common computer languages. Click here to get started in MicroPython on the BrainPad . Mbed Mbed is a free online development environment that can be used to program the BrainPad in C or C++ without downloading or installing anything. Mbed is not as friendly a development environment as VisualStudio -- you don't get the TinyCLR operating system or the advanced features and debugging of Visual Studio. The advantage of Mbed is that the entire system is completely web based. There is no software to install, maintain or update on your computer, and it is always available on any computer anywhere in the world. Click here to get started using Mbed with the BrainPad Bare Metal You can also write programs from scratch using one of the more traditional C/C++ development tools. Many of these tools are available for free. Click here to get started with bare metal BrainPad programming"
  },
  "go-beyond/other-software/arduino.html": {
    "href": "go-beyond/other-software/arduino.html",
    "title": "Arduino",
    "keywords": "Arduino Using Arduino with the BrainPad Arduino is simplified multi-platform IDE/C++ combo, with a community STM32 options. This video shows the use of Arduino with the BrainPad. Arduino Website Arduino STM32 Github Forum discussion about getting BrainPad display to work using Arduino"
  },
  "go-beyond/intro.html": {
    "href": "go-beyond/intro.html",
    "title": "Go Beyond",
    "keywords": "Go Beyond While it is possible, we currently do not support BrainPad Arcade programming using TinyCLR OS or MicroPython (Just Yet!. You will need to program it using MakeCode Arcade. The BrainPad Classic however gives you the option to code in a truly professional development environment: Microsoft Visual Studio. Visual Studio provides modern event driven programming with full debugging allowing you to easily manage projects of any size. You will learn the same real-world programming skills used by professionals. Don't worry -- we go step by step allowing you to learn at your own pace while advancing as far as you like. To continue, start by installing Visual Studio on your computer. Instructions are found on the System Setup page."
  },
  "go-beyond/vb/intro.html": {
    "href": "go-beyond/vb/intro.html",
    "title": "Introduction to Visual Basic",
    "keywords": "Introduction to Visual Basic Visual Basic is a very popular Microsoft .NET programming language. While being as powerful as other programming languages, it is perhaps a little easier for beginners. Visual Basic is more like plain English than other programming languages, and you don't have to type a semicolon (;) at the end of each line like you do with C, C++, and C#. Visual Basic Introduction Overview The instructions on this page describe how to run your first Visual Basic program (a \"hello world\" program) on the BrainPad. The steps are as follows: Start a new project . Manage the NuGet packages . Add the BrainPad helper code . Add the sample program . Deploy the program Before you start You should have already installed Visual Studio on your computer as well as the TinyCLR extension. If not, please start with System Setup for instructions on how to do so. Also, you need a BrainPad and a micro USB cable to continue. Plug the BrainPad into the USB port of your computer. The red power (PWR) light on the BrainPad should be on. Hello World The first step is to write some very simple code to see if the BrainPad will respond when we try to program it. This is usually called a \"hello world\" program. Start a New Project Open Visual Studio. In the File menu select New and then Project to open the New Project dialog box. In the left panel of the New Project window (see below) you can click on the small triangles to the left of each heading to expand the heading and show the options beneath it. You should see the Visual Basic language listed under the Installed heading in the left panel of the New Project window. Under Visual Basic select the TinyCLR option. In the center panel of the New Project window select TinyCLR Application . At the bottom of the New Project window you can change the name and location of your application or just stick with the default. Let's use the name BrainPadDemo . When starting out you may wish to click on the Browse button and select the folder Desktop (in the left panel) to make your application easier to find. Click the OK button on the bottom right of the New Project window. This will create a new blank project. Once created, you'll be presented with a Module1.vb tab. Manage the NuGet Packages Code packages to handle specific tasks are built into libraries. These libraries are found on a cloud service, called NuGet. This is where you will find drivers for many things, including the sensors found on the BrainPad. Soure files are listed in the Solution Explorer window. If the Solution Explorer window is not visible, click on View > Solution Explorer to open it. If you right click on the project name in the Solution Explorer window a drop down menu will appear. Select Manage NuGet Packages... from the menu. Now you should see the installed TinyCLR NuGet library (GHIElectronics.TinyCLR.Core). We need to install a couple more libraries for our program to run. Click on the Browse tab. Make sure the package source is set to Package source or All . In the search box type \"tinyclr\" and make sure the Include prerelease box is checked. You should see a list of available TinyCLR Nuget packages similar to the image below. Find and click on the GHIElectronics.TinyCLR.BrainPad package and then click on the Install button. Installing the BrainPad Nuget package will automatically install other packages as well. Click on OK . Now accept the license agreement to install the packages. Close the NuGet... tab to get back to your Program.cs window. Add the BrainPad Helper Code The BrainPad Helper code provides needed definitions for some BrainPad objects. To add this file to your program, select Add New Item... in the Project menu. Then in the Add New Item dialog box click on BrainPad Helper and then click on the Add button. You will see a tab labeled BrainPad1.vb with contents as shown below. Add the Sample Program In the Module1.vb tab we will enter short sample program (our \"Hello World\" code). Cut and paste the following code into the Module1.vb window. Module Module1 Public Sub Main() BrainPad.Display.DrawText(0, 0, \"Hello!\") BrainPad.Display.RefreshScreen() While True BrainPad.LightBulb.TurnWhite() BrainPad.Wait.Seconds(1) BrainPad.LightBulb.TurnOff() BrainPad.Wait.Seconds(1) End While End Sub End Module Your Module1.vb window should look like this: Deploy the Program Make sure your BrainPad is plugged into the computer's USB port. Now hit the start button as shown in the above image (or hit the F5 key). If you've done everything correctly the program will compile and deploy to your device. The message \"Hello World!\" should appear on the BrainPad display, and the light bulb should start blinking. Congratulations! You're on your way to learning advanced programming on the BrainPad! What happened exactly? Our application began by running the BrainPad.Display.DrawText(0, 0, \"Hello!\") and BrainPad.Display.RefreshScreen() lines to instruct the display to show the text \"Hello!\" The line BrainPad.Display.DrawText(0, 0, \"Hello!\") is known as a function call. The name of the function is \"DrawText().\" This function is part of the \"Display\" object, which is part of the \"BrainPad\" object. The items listed in parenthesis (0, 0, \"Hello!\") are called the arguments of the function. In this case the first zero tells the BrainPad to display the text at the left side of the BrainPad display. If this number is increased the text will appear farther to the right on the screen. The second zero tells the BrainPad to print the text at the top of the display. If this number is increased the text will be printed lower on the screen. The third arugument, \"Hello!,\" tells the BrainPad what text to display on the screen. After display lines are finished, the While True loop starts running. Code placed inside this while loop is executed in an infinite loop. This is why the LED keeps blinking and never stops."
  },
  "go-beyond/other-software/micropython.html": {
    "href": "go-beyond/other-software/micropython.html",
    "title": "MicroPython",
    "keywords": "MicroPython Using MicroPython with the BrainPad MicroPython allows tiny systems to run Python 3, with a small subset of the standard library. The STM32F4 is already one of available ports, making it easier to run MicroPython on the BrainPad. This video shows the steps needed to use MicroPython on the BrainPad. MicroPython Website The MicroPython project GitHub repo This GitHub repo has some nice Micropython examples."
  },
  "start-making/intro.html": {
    "href": "start-making/intro.html",
    "title": "Start Making",
    "keywords": "Start Making Getting started with the BrainPad is done using Microsoft MakeCode. The instructions are on the main website ."
  },
  "resources/intro.html": {
    "href": "resources/intro.html",
    "title": "Resources",
    "keywords": "Resources See downloads on the submenu."
  },
  "go-beyond/vb/csharp-to-vb.html": {
    "href": "go-beyond/vb/csharp-to-vb.html",
    "title": "C# to Visual Basic",
    "keywords": "C# to Visual Basic C# and Visual Basic are very similar. They are so similar that there are online converters that will convert C# to Visual Basic and vice versa. Here is one such Code Converter . Most of the BrainPad examples and projects will be built using C#, but these samples can be converted to Visual Basic if you prefer."
  },
  "go-beyond/other-software/mbed.html": {
    "href": "go-beyond/other-software/mbed.html",
    "title": "Mbed",
    "keywords": "Mbed Using Mbed with the BrainPad Mbed is an online compiler platform. There is nothing to install, just log in and start coding! When using Mbed to program the BrainPad, select the Nucleo-F401RE as your target platform. The F401RE uses the same processor as the BrainPad. This video shows how to use Mbed with the BrainPad. mbed Website Nucleo-F401RE Forum discussion about using Mbed to program the BrainPad"
  },
  "go-beyond/other-software/bare-metal.html": {
    "href": "go-beyond/other-software/bare-metal.html",
    "title": "Bare Metal",
    "keywords": "Bare Metal You can also write programs from scratch using one of the more traditional C/C++ development tools. The easiest option would be to start with the Mbed online compiler and then export your project. You can also use the free open source GNU GCC tools to build your programs, which is what we used to build the TinyCLR OS firmware. Another option is to use a commercial compiler like the Keil compiler and development environment. Keil tools are free for programs up to 32KB (MDK-Lite). Keil Website Keil ARM MDK tools GNU ARM Tools (GCC)"
  },
  "go-beyond/csharp/vb-to-csharp.html": {
    "href": "go-beyond/csharp/vb-to-csharp.html",
    "title": "Visual Basic to C#",
    "keywords": "Visual Basic to C# Visual Basic and C# are very similar. They are so similar that there are online converters that will convert Visual Basic to C# and vice versa. Here is one such Code Converter . Most of the BrainPad examples and projects will be built using C#. You can convert these examples into Visual Basic if you prefer."
  },
  "go-beyond/components/servo-motors.html": {
    "href": "go-beyond/components/servo-motors.html",
    "title": "Servo Motors",
    "keywords": "Servo Motors The BrainPad has built in support for two servo motors. These can be either continuous or positional servo motors. Continuous servo motors can have their speed and direction controlled but there is no control over their position. They are capabable of rotating continously in either direction. Positional servo motors only accept position commands. Positional servo motors only rotate part way through a revolution, usually turning up to half of a revolution (180 degrees). While you can tell a servo motor to go to a specific position, you have no control over how fast it will get there. The positional servo motor will move to a given position as quickly as possible, but it's speed depends on how much load is put on the motor. Servo Motor Methods BrainPad.ServoMotors.ServoOne.ConfigureAsContinuous(bool inverted) (A true argument will make the motor move in the opposite direction.) BrainPad.ServoMotors.ServoTwo.ConfigureAsContinuous(bool inverted) (A true argument will make the motor move in the opposite direction.) BrainPad.ServoMotors.ServoOne.ConfigureAsPositional(bool inverted) (A true argument will invert the position so the 0 degree position becomes the 180 degree position and vice versa.) BrainPad.ServoMotors.ServoTwo.ConfigureAsPositional(bool inverted) (A true argument will invert the position so the 0 degree position becomes the 180 degree position and vice versa.) BrainPad.ServoMotors.ServoOne.ConfigurePulseParameters(double minimumPulseWidth, double maximumPulseWidth) (Pulse width in milliseconds) BrainPad.ServoMotors.ServoTwo.ConfigurePulseParameters(double minimumPulseWidth, double maximumPulseWidth) (Pulse width in milliseconds) BrainPad.ServoMotors.ServoOne.Set(double value) (allowable position from 0 to 180 degrees for positional motors, allowable speed from -100% to 100% for continuous motors.) BrainPad.ServoMotors.ServoTwo.Set(double value) (allowable position from 0 to 180 degrees for positional motors, allowable speed from -100% to 100% for continuous motors.) BrainPad.ServoMotors.ServoOne.Stop() BrainPad.ServoMotors.ServoTwo.Stop() Servo Motor Sample Code Positional Servo Example The following program configures servo one for a servo motor that expects positional pulses in the one to two millisecond range. It then moves the motor to the zero degree position, waits five seconds, and then moves the motor to the 180 degree position. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing the just the main method in the original program. static void Main() { BrainPad.ServoMotors.ServoOne.ConfigureAsPositional(false); BrainPad.ServoMotors.ServoOne.ConfigurePulseParameters(1.0, 2.0); BrainPad.ServoMotors.ServoOne.Set(0.0); BrainPad.Wait.Seconds(5.0); BrainPad.ServoMotors.ServoOne.Set(180.0); } Continuous Servo Example The following program configures servo two for connection to a continous servo motor. The program moves the motor for five seconds at 100 percent speed in one direction, and then reverses direction for 5 seconds at 60 percent speed. It then stops the motor. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { BrainPad.ServoMotors.ServoTwo.ConfigureAsContinuous(false); BrainPad.ServoMotors.ServoTwo.Set(100); BrainPad.Wait.Seconds(5); BrainPad.ServoMotors.ServoTwo.Set(-60); BrainPad.Wait.Seconds(5); BrainPad.ServoMotors.ServoTwo.Set(0); }"
  },
  "go-beyond/components/buzzer.html": {
    "href": "go-beyond/components/buzzer.html",
    "title": "Buzzer",
    "keywords": "Buzzer The BrainPad buzzer is an output device. It is really not a buzzer but a crude speaker that is even capable of playing voice or music, but with poor sound quality. The buzzer's beep command allows you to make a beep sound with no control over the beep's frequency or duration. You can also tell the BrainPad to play a tone where you decide the frequency. The BrainPad will keep playing that sound until you tell it to stop or tell it to play a different tone. This allows you to play sound effects for games as well as simple melodies. Buzzer Methods BrainPad.Buzzer.Beep() - Plays a short duration beep on the BrainPad's buzzer. BrainPad.Buzzer.StartBuzzing(double frequency) - Plays a sound of given frequency. Will keep playing until told to stop. BrainPad.Buzzer.StopBuzzing() - Stops the buzzer if it is currently playing. Buzzer Sample Code The following program makes a siren sound while the down button is pressed. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { while (true) { if (BrainPad.Buttons.IsDownPressed()) { for (int frequency = 1200; frequency < 3200; frequency += 160) { BrainPad.Buzzer.StartBuzzing(frequency); BrainPad.Wait.Milliseconds(8); } for (int frequency = 3200; frequency > 1200; frequency -= 160) { BrainPad.Buzzer.StartBuzzing(frequency); BrainPad.Wait.Milliseconds(8); } } else BrainPad.Buzzer.StopBuzzing(); } }"
  },
  "go-beyond/brainpad-class-reference.html": {
    "href": "go-beyond/brainpad-class-reference.html",
    "title": "BrainPad Class Reference",
    "keywords": "BrainPad Class Reference BrainPad.Accelerometer The accelerometer is an input device that measures the force of acceleration in three axes (x, y, and z). This is commonly referred to as g-force and is expressed as a multiple of the force of gravity. For example an airplane pilot experiences of force of 2 g in a 60 degree banked turn. This means he is being pushed into his seat with a force that is double his weight. Fighter pilots may experience up to 9 g. The BrainPad returns an accelerometer value that is equal to g-force multiplied by 100. If the BrainPad is laying flat on a table with the display away from you on the right side, the x-axis runs horizontally left and right, the y-axis goes horizontally toward you and away from you, and the z-axis extends vertically straight up and down. If the BrainPad is stationary in this position, the x and y axes would read 0, but the z-axis would read -100. This is because the force of gravity is pushing down on the accelerometer with force equal to 1 g (the force of the Earth's gravity). If you turn the BrainPad upside down, the z-axis would read 100. The only time all axes read zero is when the BrainPad is free falling. BrainPad.Accelerometer.EnableFullRange = {true|false} - If set to false, the accelerometer values range from -100 to 100 (-1 g to 1 g). If set to true, the accelerometer values range from -200 to 200 (-2 g to 2 g). BrainPad.Accelerometer.ReadX() - returns an integer value in the range of -100 to 100 (or -200 to 200 if BrainPad.Accelerometer.EnableFullRange = true) based on the BrainPad's x-axis acceleration. BrainPad.Accelerometer.ReadY() - returns an integer value in the range of -100 to 100 (or -200 to 200 if BrainPad.Accelerometer.EnableFullRange = true) based on the BrainPad's y-axis acceleration. BrainPad.Accelerometer.ReadZ() - returns an integer value in the range of -100 to 100 (or -200 to 200 if BrainPad.Accelerometer.EnableFullRange = true) based on the BrainPad's z-axis acceleration. BrainPad.Buttons The four directional buttons (up, down, right and left) are used as inputs and can be read by your program to determine if the button is being pressed or not. They can be checked in two different ways. One way is to just check once to see if the button is being pressed. This works well, but it is possible to miss a button press if your program doesn't check often enough. Sometimes this is not a problem, but for some programs it may be an issue. The other way of checking buttons is to use an event handler. An event handler will continuously check to see if a button has been pressed or released. A button is released when the person pushing the button stops pushing the button. Once an event handler is set up, the BrainPad will start an event listener that will check the button for you. This allows your program to do other tasks without you worrying about missing a button event. Once the button is pushed (or released) the event listener will call your event handler. The event handler is code you write to tell the BrainPad how to react when a button is pushed (or released). While an event handler is a little harder to set up, it has the advantage allowing you to be concerned with other tasks and never missing a button event. BrainPad.Buttons.IsUpPressed() � returns a boolean true if the up button is pressed and a boolean false otherwise. BrainPad.Buttons.IsLeftPressed() � returns a boolean true if the left button is pressed and a boolean false otherwise. BrainPad.Buttons.IsRightPressed() � returns a boolean true if the right button is pressed and a boolean false otherwise. BrainPad.Buttons.IsDownPressed() � returns a boolean true if the down button is pressed and a boolean false otherwise. ButtonEventHandler WhenDownButtonReleased ButtonEventHandler WhenUpButtonPressed ButtonEventHandler WhenUpButtonReleased ButtonEventHandler WhenRightButtonPressed ButtonEventHandler WhenRightButtonReleased ButtonEventHandler WhenDownButtonPressed ButtonEventHandler WhenLeftButtonReleased ButtonEventHandler WhenLeftButtonPressed BrainPad.Buzzer The BrainPad buzzer is an output device. It is really not a buzzer but a crude speaker that is even capable of playing voice or music, but with very poor quality. The buzzer commands allow you to make a beep sound where you have no control over the frequency or duration of the sound. You can also tell the BrainPad to play a tone where you decide the frequency. The BrainPad will keep playing that sound until you tell it to stop. This allows you to play sound effects for games as well as simple melodies. BrainPad.Buzzer.Beep() � Plays a short duration beep on the BrainPad's buzzer. BrainPad.Buzzer.StartBuzzing(double frequency) � Plays a sound of the given frequency. Will keep playing untils told to stop. [Example: BrainPad.Buzzer.StartBuzzing(251.00)] BrainPad.Buzzer.StopBuzzing() � Stops the buzzer if it is currently playing. BrainPad.Display The BrainPad display is an output device. The BrainPad has commands allowing you to display numbers and text and draw simple pictures and shapes including points, lines, circles and rectangles. Display commands in this section only change the memory buffer of the display and are not seen until you also call the BrainPad.Display.RefreshScreen() method. BrainPad.Display.Height() � returns the BrainPad display's height in pixels (64). BrainPad.Display.Width() - returns the BrainPad display's width in pixels (128). BrainPad.Display.DrawSmallNumber(int x, int y, long number) - Displays a number of type long in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallNumber(10, 20, 52)] BrainPad.Display.DrawSmallNumber(int x, int y, double number) � Displays a number of type double in small text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, long number) - Displays a number of type long in large text at the given x and y coordinates. BrainPad.Display.DrawNumber(int x, int y, double number) - Displays a number of type double in large text at the given x and y coordinates. BrainPad.Display.DrawSmallText(int x, int y, string text) - Displays a string in small text at the given x and y coordinates. [Example: BrainPad.Display.DrawSmallText(20, 20, �Hello�)] BrainPad.Display.DrawText(int x, int y, string text) � Displays a string in small text at the given x and y coordinates. BrainPad.Display.DrawScaledText(int x, int y, string text, int HScale, int VScale); BrainPad.Display.CreatePicture(int width, int height, byte[] data); BrainPad.Display.CreateScaledPicture(int width, int height, byte[] data, int scale); BrainPad.Display.DrawCircle(int x, int y, int r) � Draws a circle of radius r with the center located at the given x and y coordinates. BrainPad.Display.DrawRectangle(int x, int y, int width, int height); BrainPad.Display.DrawFilledRectangle(int x, int y, int width, int height) - Draws a filled box at the display�s x and y coordinates. Width and height are in pixels. BrainPad.Display.DrawLine(int x0, int y0, int x1, int y1) � Draws a line from (x0, y0) to (x1, y1). BrainPad.Display.DrawPoint(int x, int y) - Turns on a single pixel at the given x and y coordinates. BrainPad.Display.DrawPicture(int x, int y, Picture picture); BrainPad.Display.DrawPictureFlippedHorizontally(int x, int y, Picture picture); BrainPad.Display.DrawPictureFlippedVertically(int x, int y, Picture picture); BrainPad.Display.DrawPictureRotated180Degrees(int x, int y, Picture picture); BrainPad.Display.DrawPictureRotated270Degrees(int x, int y, Picture picture); BrainPad.Display.DrawPictureRotated90Degrees(int x, int y, Picture picture); BrainPad.Display.ClearPartOfScreen(int x, int y, int width, int height); - Clears a rectangular section of the display where x and y are the top left corner of the rectangle of given width and height BrainPad.Display.ClearPoint(int x, int y); - Clears a pixel located at the display�s x and y coordinate. BrainPad.Display.ClearScreen() - Clears the entire screen buffer. BrainPad.Display.InvertColors(bool invert); BrainPad.Display.RefreshScreen() BrainPad.LightBulb. The BrainPad Light Bulb is actually three light emitting diodes (LEDs) in one package. One LED is red, one is green, and one is blue. These can turned on independantly at varying intensities to create up to one million different colors. BrainPad.LightBulb.TurnColor(double r, double g, double b) � Used to create a variety of colors based on varying degrees of red, green and blue (min. 0 � max 100) BrainPad.LightBulb.TurnRed() BrainPad.LightBulb.TurnBlue() BrainPad.LightBulb.TurnGreen() BrainPad.LightBulb.TurnWhite() BrainPad.LightBulb.TurnOff() BrainPad.LightSensor The BrainPad Light Sensor is used to measure the amount of light falling on the sensor. BrainPad.LightSensor.ReadLightLevel() BrainPad.ServoMotors The BrainPad has built in support for two servo motors. These can be either continuous or positional servo motors. Continuous servo motors can have their speed and direction controlled but there is no control over their position. They are capabable of rotating continously in either direction. Positional servo motors only accept position commands. Positional servo motors only rotate part way through a revolution, usually turning up to half of a revolution (180 degrees). While you can tell a servo motor to go to a specific position, you have no control over how fast it will get there. The positional servo motor will move to a given position as quickly as possible, but it's speed depends on how much load is put on the motor. BrainPad.ServoMotors.ServoOne { get; } BrainPad.ServoMotors.ServoTwo { get; } BrainPad.ServoMotors.ConfigureAsContinuous(bool inverted); BrainPad.ServoMotors.ConfigureAsPositional(bool inverted); BrainPad.ServoMotors.ConfigurePulseParameters(double minimumPulseWidth, double maximumPulseWidth); BrainPad.ServoMotors.Set(double value); BrainPad.ServoMotors.Stop(); BrainPad.TemperatureSensor The BrainPad temperature sensor is basically a digital thermometer. The commands for reading the temperature can report the temperature in either Celsius or Fahrenheit. BrainPad.TemperatureSensor.ReadTemperatureInCelsius() � Returns the Celsius temp from the BrainPad�s sensor as a double. BrainPad.TemperatureSensor.ReadTemperatureInFahrenheit()� Returns the Fahrenheit temp from the BrainPad�s sensor as a double. BrainPad.Wait This command tells the BrainPad to wait and do nothing for the time specified. This command could be used to play a musical note for a given duration. It can also be used to tell the BrainPad to wait long enough for another task to finish. For example, you might tell a servo motor to move to a specified position and then tell the BrainPad to wait to give the servo time to move to that position. BrainPad.Wait.Milliseconds(double milliseconds) - Pause the code for the duration of the parameter in milliseconds. BrainPad.Wait.Seconds(double seconds) - Pause the code for the duration of the parameter in seconds. BrainPad.Wait.Minimum() � Pause the code for a default minimum duration. BrainPad.WriteToComputer This command writes numbers or text to the computers Visual Studio debug output window. This can be helpful for debugging or finding the errors in a program. For example, if you are doing a calculation involving a large number of steps that is giving an incorrect result, you can write the result of each step to the computer to figure out which step is not working properly. You could use the BrainPad's display to do the same thing, but the display might already be in use or might not be big enough to display all the information. BrainPad.WriteToComputer(string message) � Writes the string in its parameter to the Visual Studio Debug Output Window. BrainPad.WriteToComputer(int message) � Writes the integer in its parameter to the Visual Studio Debug Output Window. BrainPad.WriteToComputer(double message) � Writes the double in its parameter to the Visual Studio Debug Output Window."
  },
  "go-beyond/system-setup.html": {
    "href": "go-beyond/system-setup.html",
    "title": "System Setup",
    "keywords": "System Setup TinyCLR OS is the tiny operating system used by the BrainPad to run your C# and Visual Basic programs. Microsoft Visual Studio is used to write these programs on your computer and is also used by professional programmers the world over. Both TinyCLR and Visual Studio are available for free, but must be set up before you can program the BrainPad and start having fun. This video details the instructions on this page. Tip You can learn more about TinyCLR OS on the GHI Electronics website System Setup Overview The instructions on this page describe how to setup your computer to start programming the BrainPad using Visual Studio. The steps are as follows: Step 1: Setup Your Computer Install Visual Studio . Install the TinyCLR Extension . Step 2: Setup Your BrainPad Load the BrainPad TinyCLR OS Firmware . Step 1: Setup Your Computer Install Visual Studio The Visual Studio Community Edition is free and can be found here: Microsoft Visual Studio 2017 Community Edition. Click on the above link an then click on the Download VS Community 2017 button. After downloading is complete, open or run the file. If you are asked, allow the program to make changes to your device. When the installation program shows the Workloads screen, select .NET desktop development (you should see a check mark in the .NET desktop development box) and then click the Install button. After installation is complete, click on the Launch button. You will be asked to sign in or sign up for Visual Studio developer services. You can either sign in (or sign up) now or click the 'Not now, maybe later' option. You will then be asked to pick a color scheme and Visual Studio will start. Install the TinyCLR Extension This project system extension allows Visual Studio to work with the BrainPad. To install, first run Visual Studio and then go to Tools->Extensions and Updates... . In the search box enter tinyclr and you should now be able to see the extension. Go ahead and install it. Tip It is possible to download the extension seperately to install on a computer without internet access. Step 2: Setup Your BrainPad Load the BrainPad TinyCLR Firmware The TinyCLR OS firmware is loaded the same way MakeCode programs are loaded. Download the desired BrainPad TinyCLR OS firmware from Downloads . Select Show in folder or Save and Open folder (depending on your browser). Connect the BrainPad to your computer using a micro USB cable. The power (PWR) light on the BrainPad should be on. Press and hold the RESET button on the BrainPad for at least three seconds until the Light Bulb on the BrainPad lights up green. Window will detect a media device named BrainPad . Copy or drag the firmware file from the folder in step 2 into this media. The Light Bulb on the BrainPad will flicker and a progress gauge will appear on the computer screen. It only takes a few seconds for the firmware to be copied to the BrainPad. When it is done, the green light on the BrainPad will stop flickering and the BrainPad2 window will close. Congratulations! Your BrainPad is now running TinyCLR OS. While the BrainPad will seem to not do anything at this point, it is actually running TinyCLR OS and is waiting for Visual Studio. For verification, you can check under device manager to verify it is runnig TinyCLR OS. Note The BrainPad comes with a \"bootloader\" pre-installed. You shouldn't have to reinstall it unless you are an advanced user using advanced programming techniques. If you need to reflash it, you can get it from our downloads page to find out more. Ready... Steady... GoByond! Congratulations! You are now ready to start programming like a professional. You have the option of using the C# programming language or the Visual Basic programming language. If you are not sure which one to pick, C# is used more often in the professional world and is recommended for those serious about learning programming. Visual Basic is easier to use -- especially for beginners. We use C# for our own software development, but we usually start with Visual Basic for those who are new to programming. You are not locked in to one language -- you can freely switch between C# and Visual Basic. To give you a better idea, here is code that counts from 1 to 10 on the BrainPad display in C#: namespace Counter { class Program { public void Main() { for (int count = 1; count < 11; count++) { BrainPad.Display.DrawNumber(0, 0, count); BrainPad.Display.RefreshScreen(); BrainPad.Wait.Seconds(1); } } } } And here is the equivalent code in Visual Basic: Class Program Public Sub Main() For count = 1 To 10 BrainPad.Display.DrawNumber(0, 0, count) BrainPad.Display.RefreshScreen() BrainPad.Wait.Seconds(1) Next count End Sub End Class Click on a link below to get started: C# Introducton Visual Basic Introduction"
  },
  "go-beyond/components/accelerometer.html": {
    "href": "go-beyond/components/accelerometer.html",
    "title": "Accelerometer",
    "keywords": "Accelerometer The accelerometer is an input device that measures the force of acceleration in three axes (x, y, and z). This is commonly referred to as g-force and is expressed as a multiple of the force of gravity. For example, an airplane pilot experiences of force of 2 g in a 60 degree banked turn. This means he is being pushed into his seat with a force that is double his weight. Fighter pilots may experience up to 9 g. The BrainPad returns an accelerometer value that is equal to g-force multiplied by 100. If the BrainPad is laying flat on a table with the display away from you on the right side, the x-axis runs horizontally left and right, the y-axis goes horizontally toward you and away from you, and the z-axis extends vertically straight up and down. If the BrainPad is stationary in this position, the x and y axes would read 0, but the z-axis would read -100. This is because the force of gravity is pushing down on the accelerometer with force equal to 1 g (the force of the Earth's gravity). If you turn the BrainPad upside down, the z-axis would read 100. The only time all axes read zero is when the BrainPad is free falling. Accelerometer Methods BrainPad.Accelerometer.EnableFullRange = {true|false} - If set to false, the accelerometer values range from -100 to 100 (-1 g to 1 g). If set to true, the accelerometer values range from -200 to 200 (-2 g to 2 g). BrainPad.Accelerometer.ReadX() - returns an integer value in the range of -100 to 100 (or -200 to 200 if BrainPad.Accelerometer.EnableFullRange = true) based on the BrainPad's x-axis acceleration. BrainPad.Accelerometer.ReadY() - returns an integer value in the range of -100 to 100 (or -200 to 200 if BrainPad.Accelerometer.EnableFullRange = true) based on the BrainPad's y-axis acceleration. BrainPad.Accelerometer.ReadZ() - returns an integer value in the range of -100 to 100 (or -200 to 200 if BrainPad.Accelerometer.EnableFullRange = true) based on the BrainPad's z-axis acceleration. Accelerometer Sample Code The following sample program uses the accelerometer to change the color of the LightBulb depending on how the BrainPad is tilted. To try it, start a new C# project , manage the NuGet packages , and add the BrainPad helper code . Then copy this code and paste it into the Program.cs window replacing just the main method in the original program. static void Main() { double red, green, blue; while (true) { red = Math.Abs(BrainPad.Accelerometer.ReadX()); green = Math.Abs(BrainPad.Accelerometer.ReadY()); blue = Math.Abs(BrainPad.Accelerometer.ReadZ()); BrainPad.LightBulb.TurnColor(red, green, blue); BrainPad.Wait.Milliseconds(20); } } In this example the Math.Abs()function returns the absolute value of the number. If the accelerometer returns a negative number it is changed to a positive number of equal magnitude. That way the Light Bulb always gets arguments in the range of 0-100."
  }
}